{
    "sourceFile": "src/components/donation-list.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1746548537842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746548838381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,14 @@\n   } else if (itemNameLower.includes('manzanas') || itemNameLower.includes('fuji')) {\n     return '/images/manzanukis.jpg';\n   } else if (itemNameLower.includes('leche') || itemNameLower.includes('carton')) {\n     return '/images/leche.png';\n+  } else if (itemNameLower.includes('pasta') || itemNameLower.includes('integral')) {\n+    return '/images/pastaintegral.jpg';\n+  } else if (itemNameLower.includes('plátanos') || itemNameLower.includes('maduros')) {\n+    return '/images/platanosmaduros.jpg';\n+  } else if (itemNameLower.includes('yogur') || itemNameLower.includes('griego')) {\n+    return '/images/yogurtgriego.png';\n   }\n   \n   // Si no hay coincidencia, devuelve undefined para usar la imagen por defecto\n   return undefined;\n"
                },
                {
                    "date": 1746549569859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,46 +56,74 @@\n   return messages;\n };\n \n // Función para asignar imágenes locales según el nombre del producto\n-const getLocalImageForItem = (itemName: string): string | undefined => {\n+const getLocalImageForItem = (itemName: string, status: Donation['status']): string => {\n   const itemNameLower = itemName.toLowerCase();\n   \n-  if (itemNameLower.includes('pan') || itemNameLower.includes('croissant') || itemNameLower.includes('bollería')) {\n-    return '/images/pan.jpg';\n-  } else if (itemNameLower.includes('manzanas') || itemNameLower.includes('fuji')) {\n-    return '/images/manzanukis.jpg';\n-  } else if (itemNameLower.includes('leche') || itemNameLower.includes('carton')) {\n-    return '/images/leche.png';\n-  } else if (itemNameLower.includes('pasta') || itemNameLower.includes('integral')) {\n-    return '/images/pastaintegral.jpg';\n-  } else if (itemNameLower.includes('plátanos') || itemNameLower.includes('maduros')) {\n-    return '/images/platanosmaduros.jpg';\n-  } else if (itemNameLower.includes('yogur') || itemNameLower.includes('griego')) {\n-    return '/images/yogurtgriego.png';\n+  // Para donaciones reclamadas y entregadas (historial), usar nuevas imágenes\n+  if (status === 'claimed' || status === 'delivered' || status === 'expired') {\n+    if (itemNameLower.includes('pan')) {\n+      return '/images/pandulce.png';\n+    } else if (itemNameLower.includes('manzanas') || itemNameLower.includes('fuji')) {\n+      return '/images/donas.jpg';\n+    } else if (itemNameLower.includes('leche') || itemNameLower.includes('carton')) {\n+      return '/images/cafe.jpeg';\n+    } else if (itemNameLower.includes('pasta') || itemNameLower.includes('integral')) {\n+      return '/images/arroz.avif';\n+    } else if (itemNameLower.includes('plátanos') || itemNameLower.includes('maduros')) {\n+      return '/images/lentejas.jpg';\n+    } else if (itemNameLower.includes('yogur') || itemNameLower.includes('griego')) {\n+      return '/images/gelatina.jpg';\n+    }\n   }\n+  // Para donaciones disponibles\n+  else {\n+    if (itemNameLower.includes('pan') || itemNameLower.includes('croissant') || itemNameLower.includes('bollería')) {\n+      return '/images/pan.jpg';\n+    } else if (itemNameLower.includes('manzanas') || itemNameLower.includes('fuji')) {\n+      return '/images/manzanukis.jpg';\n+    } else if (itemNameLower.includes('leche') || itemNameLower.includes('carton')) {\n+      return '/images/leche.png';\n+    } else if (itemNameLower.includes('pasta') || itemNameLower.includes('integral')) {\n+      return '/images/pastaintegral.jpg';\n+    } else if (itemNameLower.includes('plátanos') || itemNameLower.includes('maduros')) {\n+      return '/images/platanosmaduros.jpg';\n+    } else if (itemNameLower.includes('yogur') || itemNameLower.includes('griego')) {\n+      return '/images/yogurtgriego.png';\n+    }\n+  }\n   \n-  // Si no hay coincidencia, devuelve undefined para usar la imagen por defecto\n-  return undefined;\n+  // Si no hay coincidencia específica, devolver una imagen predeterminada\n+  return status === 'available' ? '/images/pan.jpg' : '/images/pandulce.png';\n };\n \n const generateMockDonations = (count: number): Donation[] => {\n-  const items = ['Panes variados', 'Manzanas Fuji Frescas', 'Sopa de Lentejas Enlatada', 'Cartones de Leche Semidesnatada', 'Cajas de Pasta Integral', 'Vasos de Yogur Griego Natural', 'Croissants y Bollería', 'Plátanos Maduros'];\n-  const units = ['bolsas', 'kg', 'latas', 'litros', 'cajas', 'unidades', 'unidades', 'kg']; // Match units to items\n+  const items = [\n+    'Panes variados', \n+    'Manzanas Fuji Frescas', \n+    'Sopa de Lentejas Enlatada', \n+    'Cartones de Leche Semidesnatada', \n+    'Arroz Integral Ecológico', // Cambiado de \"Cajas de Pasta Integral\"\n+    'Vasos de Gelatina Surtida', // Cambiado de \"Vasos de Yogur Griego Natural\"\n+    'Donas y Bollería Variada', // Cambiado de \"Croissants y Bollería\"\n+    'Café Premium en Grano' // Cambiado de \"Plátanos Maduros\"\n+  ];\n+  const units = ['bolsas', 'kg', 'latas', 'litros', 'kg', 'unidades', 'unidades', 'kg']; // Match units to items\n   const quantities = [10, 5, 24, 20, 15, 50, 30, 8]; // Numeric quantities\n   const locations = ['Panadería El Sol', 'Frutería La Huerta', 'Almacén Central FoodLink', 'Cafetería El Rincón', 'Mercado Municipal Puesto 5', 'Supermercado La Despensa', 'Panadería Delicias', 'Frutería Vitalidad'];\n   const statuses: Donation['status'][] = ['available', 'available', 'claimed', 'available', 'delivered', 'expired', 'claimed', 'delivered'];\n   const descriptions = [\n     'Pan del día anterior, ideal para tostadas o migas.',\n     'Manzanas Fuji orgánicas, algunas con pequeñas marcas.',\n     'Sopa de lentejas casera, lista para calentar.',\n     'Leche UHT semidesnatada, caducidad próxima (5 días).',\n-    'Penne integral de trigo duro.',\n-    'Yogur griego natural sin azúcar, bueno por 3 días más.',\n-    'Excedente de croissants y napolitanas del día.',\n-    'Caja de plátanos maduros, ideales para batidos o repostería.',\n+    'Arroz integral de cultivo ecológico, en perfectas condiciones.', // Actualizado\n+    'Gelatina de varios sabores, elaboración reciente.', // Actualizado\n+    'Donas glaseadas y con chocolate, recién horneadas.', // Actualizado\n+    'Café de origen colombiano, perfecto para baristas.', // Actualizado\n   ];\n-   const photoHints = ['assorted bread', 'fuji apples', 'lentil soup', 'milk cartons', 'pasta boxes', 'yogurt cups', 'pastries assortment', 'ripe bananas']; // Specific, relevant hints\n+  const photoHints = ['assorted bread', 'fuji apples', 'lentil soup', 'milk cartons', 'rice bags', 'jello cups', 'donuts assortment', 'coffee beans']; // Updated hints\n    const pickupInstructions = [\n      'Preguntar por Ana en recepción. L-V 9am-5pm.',\n      'Recoger en muelle de carga trasero. Tocar timbre.',\n      'Entrada por puerta lateral (indicada). Aparcamiento disponible.',\n@@ -137,11 +165,10 @@\n     const donationStatus = status;\n     const isFree = prices[index] === undefined; // Determine if free based on price presence\n     const currentPhotoHint = photoHints[index]; // Get hint for current item\n     \n-    // Usar imágenes locales si hay coincidencia, de lo contrario usar URL aleatoria\n-    const localImage = getLocalImageForItem(items[index]);\n-    const photoUrl = localImage || `https://picsum.photos/seed/${currentPhotoHint.replace(/ /g, '_')}/400/300`;\n+    // Usar la función mejorada para asignar imágenes\n+    const photoUrl = getLocalImageForItem(items[index], donationStatus);\n \n     return {\n       id: donationId,\n       itemName: items[index],\n"
                },
                {
                    "date": 1746549851679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { useState, useEffect } from 'react';\n import type { Donation, Message } from '@/types/donation';\n import DonationCard from './donation-card';\n import { Skeleton } from './ui/skeleton';\n-import { Card as SkeletonCard, CardContent as SkeletonCardContent, CardFooter as SkeletonCardFooter, CardHeader as SkeletonCardHeader } from \"@/components/ui/card\"; // Use aliases for skeleton card\n+import { Card as SkeletonCard, CardContent as SkeletonCardFooter, CardHeader as SkeletonCardHeader } from \"@/components/ui/card\"; // Use aliases for skeleton card\n import { useToast } from \"@/hooks/use-toast\";\n import { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\n import { Info } from 'lucide-react';\n import { cn } from '@/lib/utils';\n@@ -59,69 +59,79 @@\n // Función para asignar imágenes locales según el nombre del producto\n const getLocalImageForItem = (itemName: string, status: Donation['status']): string => {\n   const itemNameLower = itemName.toLowerCase();\n   \n-  // Para donaciones reclamadas y entregadas (historial), usar nuevas imágenes\n-  if (status === 'claimed' || status === 'delivered' || status === 'expired') {\n+  // Para donaciones reclamadas y entregadas (historial), usar las imágenes específicas para reclamadas\n+  if (status === 'claimed') {\n     if (itemNameLower.includes('pan')) {\n       return '/images/pandulce.png';\n-    } else if (itemNameLower.includes('manzanas') || itemNameLower.includes('fuji')) {\n-      return '/images/donas.jpg';\n-    } else if (itemNameLower.includes('leche') || itemNameLower.includes('carton')) {\n-      return '/images/cafe.jpeg';\n-    } else if (itemNameLower.includes('pasta') || itemNameLower.includes('integral')) {\n+    } else if (itemNameLower.includes('arroz')) {\n       return '/images/arroz.avif';\n-    } else if (itemNameLower.includes('plátanos') || itemNameLower.includes('maduros')) {\n+    } else if (itemNameLower.includes('lentejas')) {\n       return '/images/lentejas.jpg';\n-    } else if (itemNameLower.includes('yogur') || itemNameLower.includes('griego')) {\n+    }\n+  } \n+  // Para donaciones entregadas o expiradas (historial)\n+  else if (status === 'delivered' || status === 'expired') {\n+    if (itemNameLower.includes('café')) {\n+      return '/images/cafe.jpeg';\n+    } else if (itemNameLower.includes('donas')) {\n+      return '/images/donas.jpg';\n+    } else if (itemNameLower.includes('gelatina')) {\n       return '/images/gelatina.jpg';\n     }\n   }\n   // Para donaciones disponibles\n   else {\n     if (itemNameLower.includes('pan') || itemNameLower.includes('croissant') || itemNameLower.includes('bollería')) {\n       return '/images/pan.jpg';\n-    } else if (itemNameLower.includes('manzanas') || itemNameLower.includes('fuji')) {\n+    } else if (itemNameLower.includes('manzanas')) {\n       return '/images/manzanukis.jpg';\n-    } else if (itemNameLower.includes('leche') || itemNameLower.includes('carton')) {\n+    } else if (itemNameLower.includes('leche')) {\n       return '/images/leche.png';\n-    } else if (itemNameLower.includes('pasta') || itemNameLower.includes('integral')) {\n+    } else if (itemNameLower.includes('pasta')) {\n       return '/images/pastaintegral.jpg';\n-    } else if (itemNameLower.includes('plátanos') || itemNameLower.includes('maduros')) {\n+    } else if (itemNameLower.includes('plátanos')) {\n       return '/images/platanosmaduros.jpg';\n-    } else if (itemNameLower.includes('yogur') || itemNameLower.includes('griego')) {\n+    } else if (itemNameLower.includes('yogur')) {\n       return '/images/yogurtgriego.png';\n     }\n   }\n   \n-  // Si no hay coincidencia específica, devolver una imagen predeterminada\n-  return status === 'available' ? '/images/pan.jpg' : '/images/pandulce.png';\n+  // Si no hay coincidencia específica, devolver una imagen predeterminada según el estado\n+  if (status === 'claimed') {\n+    return '/images/pandulce.png';\n+  } else if (status === 'delivered' || status === 'expired') {\n+    return '/images/cafe.jpeg';\n+  } else {\n+    return '/images/pan.jpg';\n+  }\n };\n \n const generateMockDonations = (count: number): Donation[] => {\n   const items = [\n     'Panes variados', \n     'Manzanas Fuji Frescas', \n     'Sopa de Lentejas Enlatada', \n     'Cartones de Leche Semidesnatada', \n-    'Arroz Integral Ecológico', // Cambiado de \"Cajas de Pasta Integral\"\n-    'Vasos de Gelatina Surtida', // Cambiado de \"Vasos de Yogur Griego Natural\"\n-    'Donas y Bollería Variada', // Cambiado de \"Croissants y Bollería\"\n-    'Café Premium en Grano' // Cambiado de \"Plátanos Maduros\"\n+    'Arroz Integral Ecológico',\n+    'Vasos de Gelatina Surtida',\n+    'Pan Dulce Tradicional', // Cambiado para reclamadas\n+    'Lentejas Ecológicas' // Cambiado para reclamadas\n   ];\n-  const units = ['bolsas', 'kg', 'latas', 'litros', 'kg', 'unidades', 'unidades', 'kg']; // Match units to items\n+  const units = ['bolsas', 'kg', 'latas', 'litros', 'kg', 'unidades', 'piezas', 'kg']; // Match units to items\n   const quantities = [10, 5, 24, 20, 15, 50, 30, 8]; // Numeric quantities\n-  const locations = ['Panadería El Sol', 'Frutería La Huerta', 'Almacén Central FoodLink', 'Cafetería El Rincón', 'Mercado Municipal Puesto 5', 'Supermercado La Despensa', 'Panadería Delicias', 'Frutería Vitalidad'];\n-  const statuses: Donation['status'][] = ['available', 'available', 'claimed', 'available', 'delivered', 'expired', 'claimed', 'delivered'];\n+  const locations = ['Panadería El Sol', 'Frutería La Huerta', 'Almacén Central FoodLink', 'Cafetería El Rincón', 'Mercado Municipal Puesto 5', 'Supermercado La Despensa', 'Panadería Delicias', 'Tienda Orgánica Natural'];\n+  const statuses: Donation['status'][] = ['available', 'available', 'claimed', 'available', 'delivered', 'expired', 'claimed', 'claimed']; // Ajustado para tener 3 reclamadas\n   const descriptions = [\n     'Pan del día anterior, ideal para tostadas o migas.',\n     'Manzanas Fuji orgánicas, algunas con pequeñas marcas.',\n     'Sopa de lentejas casera, lista para calentar.',\n     'Leche UHT semidesnatada, caducidad próxima (5 días).',\n-    'Arroz integral de cultivo ecológico, en perfectas condiciones.', // Actualizado\n-    'Gelatina de varios sabores, elaboración reciente.', // Actualizado\n-    'Donas glaseadas y con chocolate, recién horneadas.', // Actualizado\n-    'Café de origen colombiano, perfecto para baristas.', // Actualizado\n+    'Arroz integral de cultivo ecológico, en perfectas condiciones.',\n+    'Gelatina de varios sabores, elaboración reciente.',\n+    'Pan dulce tradicional: conchas, orejas y bigotes recién horneados.', // Descripción para pandulce.png\n+    'Lentejas ecológicas de primera calidad, sin conservantes.' // Descripción para lentejas.jpg\n   ];\n   const photoHints = ['assorted bread', 'fuji apples', 'lentil soup', 'milk cartons', 'rice bags', 'jello cups', 'donuts assortment', 'coffee beans']; // Updated hints\n    const pickupInstructions = [\n      'Preguntar por Ana en recepción. L-V 9am-5pm.',\n"
                },
                {
                    "date": 1746549970882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,392 @@\n+\"use client\";\n+\n+import type { FC } from 'react';\n+import { useState, useEffect } from 'react';\n+import type { Donation, Message } from '@/types/donation';\n+import DonationCard from './donation-card';\n+import { Skeleton } from './ui/skeleton';\n+import { Card as SkeletonCard, CardContent as SkeletonCardContent, CardHeader as SkeletonCardHeader, CardFooter as SkeletonCardFooter } from \"@/components/ui/card\"; // Corregido para incluir CardFooter\n+import { useToast } from \"@/hooks/use-toast\";\n+import { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\n+import { Info } from 'lucide-react';\n+import { cn } from '@/lib/utils';\n+\n+\n+// --- Mock Data (Translated & Expanded with new fields) ---\n+const generateMockMessages = (donationId: string, status: Donation['status']): Message[] => {\n+  const messages: Message[] = [];\n+  const baseTime = new Date();\n+\n+  messages.push({\n+    id: `${donationId}-msg-1`,\n+    sender: 'system',\n+    text: 'Donación publicada por Empresa.',\n+    timestamp: new Date(baseTime.getTime() - 86400000 * 2), // 2 days ago\n+  });\n+\n+  if (status === 'claimed' || status === 'delivered') {\n+    messages.push({\n+      id: `${donationId}-msg-2`,\n+      sender: 'organization',\n+      text: 'Hola, hemos reclamado esta donación. ¿Cuándo podemos pasar a recogerla?',\n+      timestamp: new Date(baseTime.getTime() - 86400000), // 1 day ago\n+    });\n+    messages.push({\n+      id: `${donationId}-msg-3`,\n+      sender: 'business',\n+      text: '¡Genial! Pueden pasar mañana entre las 10 AM y las 4 PM. Por favor, usen la entrada trasera.',\n+      timestamp: new Date(baseTime.getTime() - 86400000 + 3600000), // 1 day ago + 1 hour\n+    });\n+  }\n+  if (status === 'delivered') {\n+     messages.push({\n+      id: `${donationId}-msg-4`,\n+      sender: 'organization',\n+      text: 'Recogido, ¡muchas gracias!',\n+      timestamp: new Date(baseTime.getTime() - 3600000), // 1 hour ago\n+    });\n+     messages.push({\n+      id: `${donationId}-msg-5`,\n+      sender: 'system',\n+      text: 'Entrega validada por la empresa.',\n+      timestamp: new Date(baseTime.getTime() - 1800000), // 30 mins ago\n+    });\n+  }\n+\n+  return messages;\n+};\n+\n+// Función para asignar imágenes locales según el nombre del producto\n+const getLocalImageForItem = (itemName: string, status: Donation['status']): string => {\n+  const itemNameLower = itemName.toLowerCase();\n+  \n+  // Para donaciones reclamadas y entregadas (historial), usar las imágenes específicas para reclamadas\n+  if (status === 'claimed') {\n+    if (itemNameLower.includes('pan')) {\n+      return '/images/pandulce.png';\n+    } else if (itemNameLower.includes('arroz')) {\n+      return '/images/arroz.avif';\n+    } else if (itemNameLower.includes('lentejas')) {\n+      return '/images/lentejas.jpg';\n+    }\n+  } \n+  // Para donaciones entregadas o expiradas (historial)\n+  else if (status === 'delivered' || status === 'expired') {\n+    if (itemNameLower.includes('café')) {\n+      return '/images/cafe.jpeg';\n+    } else if (itemNameLower.includes('donas')) {\n+      return '/images/donas.jpg';\n+    } else if (itemNameLower.includes('gelatina')) {\n+      return '/images/gelatina.jpg';\n+    }\n+  }\n+  // Para donaciones disponibles\n+  else {\n+    if (itemNameLower.includes('pan') || itemNameLower.includes('croissant') || itemNameLower.includes('bollería')) {\n+      return '/images/pan.jpg';\n+    } else if (itemNameLower.includes('manzanas')) {\n+      return '/images/manzanukis.jpg';\n+    } else if (itemNameLower.includes('leche')) {\n+      return '/images/leche.png';\n+    } else if (itemNameLower.includes('pasta')) {\n+      return '/images/pastaintegral.jpg';\n+    } else if (itemNameLower.includes('plátanos')) {\n+      return '/images/platanosmaduros.jpg';\n+    } else if (itemNameLower.includes('yogur')) {\n+      return '/images/yogurtgriego.png';\n+    }\n+  }\n+  \n+  // Si no hay coincidencia específica, devolver una imagen predeterminada según el estado\n+  if (status === 'claimed') {\n+    return '/images/pandulce.png';\n+  } else if (status === 'delivered' || status === 'expired') {\n+    return '/images/cafe.jpeg';\n+  } else {\n+    return '/images/pan.jpg';\n+  }\n+};\n+\n+const generateMockDonations = (count: number): Donation[] => {\n+  const items = [\n+    'Panes variados', \n+    'Manzanas Fuji Frescas', \n+    'Sopa de Lentejas Enlatada', \n+    'Cartones de Leche Semidesnatada', \n+    'Arroz Integral Ecológico',\n+    'Vasos de Gelatina Surtida',\n+    'Pan Dulce Tradicional', // Cambiado para reclamadas\n+    'Lentejas Ecológicas' // Cambiado para reclamadas\n+  ];\n+  const units = ['bolsas', 'kg', 'latas', 'litros', 'kg', 'unidades', 'piezas', 'kg']; // Match units to items\n+  const quantities = [10, 5, 24, 20, 15, 50, 30, 8]; // Numeric quantities\n+  const locations = ['Panadería El Sol', 'Frutería La Huerta', 'Almacén Central FoodLink', 'Cafetería El Rincón', 'Mercado Municipal Puesto 5', 'Supermercado La Despensa', 'Panadería Delicias', 'Tienda Orgánica Natural'];\n+  const statuses: Donation['status'][] = ['available', 'available', 'claimed', 'available', 'delivered', 'expired', 'claimed', 'claimed']; // Ajustado para tener 3 reclamadas\n+  const descriptions = [\n+    'Pan del día anterior, ideal para tostadas o migas.',\n+    'Manzanas Fuji orgánicas, algunas con pequeñas marcas.',\n+    'Sopa de lentejas casera, lista para calentar.',\n+    'Leche UHT semidesnatada, caducidad próxima (5 días).',\n+    'Arroz integral de cultivo ecológico, en perfectas condiciones.',\n+    'Gelatina de varios sabores, elaboración reciente.',\n+    'Pan dulce tradicional: conchas, orejas y bigotes recién horneados.', // Descripción para pandulce.png\n+    'Lentejas ecológicas de primera calidad, sin conservantes.' // Descripción para lentejas.jpg\n+  ];\n+  const photoHints = ['assorted bread', 'fuji apples', 'lentil soup', 'milk cartons', 'rice bags', 'jello cups', 'donuts assortment', 'coffee beans']; // Updated hints\n+   const pickupInstructions = [\n+     'Preguntar por Ana en recepción. L-V 9am-5pm.',\n+     'Recoger en muelle de carga trasero. Tocar timbre.',\n+     'Entrada por puerta lateral (indicada). Aparcamiento disponible.',\n+     'Avisar con 30 min de antelación. Llamar al 555-1234.',\n+     'Puesto 5, preguntar por Carlos. Horario de mercado.',\n+     'Ir a atención al cliente. Muelle de descarga disponible.',\n+     'Preguntar por Luis en obrador. L-S 8am-2pm.',\n+     'Recoger antes de las 12pm. Muelle trasero.',\n+   ];\n+   // Example prices in MXN$\n+   const prices = [undefined, 10.50, undefined, 5.00, undefined, 3.50, 8.00, 12.00];\n+\n+\n+  return Array.from({ length: count }, (_, i) => {\n+    const index = i % items.length; // Use modulo for cycling through data\n+    const status = statuses[index];\n+    const baseDate = new Date();\n+    const expirationOffset = status === 'expired' ? -2 : (index % 7) + 1;\n+    const expirationDate = new Date(baseDate.getTime() + 86400000 * expirationOffset);\n+\n+    const postedDate = new Date();\n+    postedDate.setDate(postedDate.getDate() - (index % 5));\n+\n+    let claimedDate: Date | undefined = undefined;\n+    let deliveredDate: Date | undefined = undefined;\n+\n+    if (status === 'claimed' || status === 'delivered') {\n+        claimedDate = new Date(postedDate.getTime() + 86400000 * (index % 2 + 1));\n+        if (claimedDate > new Date()) claimedDate = new Date(postedDate.getTime() + 3600000);\n+\n+        if (status === 'delivered') {\n+            deliveredDate = new Date(claimedDate.getTime() + 86400000 * (index % 3 + 1));\n+            if (deliveredDate > new Date()) deliveredDate = new Date(claimedDate.getTime() + 7200000);\n+        }\n+    }\n+\n+\n+    const donationId = `donation-${i + 1}`;\n+    const donationStatus = status;\n+    const isFree = prices[index] === undefined; // Determine if free based on price presence\n+    const currentPhotoHint = photoHints[index]; // Get hint for current item\n+    \n+    // Usar la función mejorada para asignar imágenes\n+    const photoUrl = getLocalImageForItem(items[index], donationStatus);\n+\n+    return {\n+      id: donationId,\n+      itemName: items[index],\n+      description: descriptions[index],\n+      quantity: quantities[index], // Use numeric quantity\n+      unit: units[index], // Use specific unit\n+      pricePerUnit: prices[index], // Assign price in MXN$\n+      expirationDate: expirationDate.toISOString(),\n+      pickupLocation: locations[index],\n+      pickupInstructions: pickupInstructions[index],\n+      photoUrl: photoUrl, // Usa la imagen local o la generada\n+      postedBy: `Empresa ${String.fromCharCode(65 + (index % 5))}`,\n+      status: donationStatus,\n+      claimedBy: status === 'claimed' || status === 'delivered' ? `Org ${index % 3 + 1}` : undefined,\n+      postedAt: postedDate.toISOString(),\n+      claimedAt: claimedDate?.toISOString(),\n+      deliveredAt: deliveredDate?.toISOString(),\n+      isFree: isFree, // Set isFree based on price\n+      messages: generateMockMessages(donationId, donationStatus),\n+      'data-ai-hint': currentPhotoHint, // Use the specific hint\n+      validationCode: status === 'delivered' || status === 'claimed' ? `VAL${100 + i}`: undefined,\n+      qualityRating: status === 'delivered' ? (index % 5) + 1 : undefined\n+    };\n+  });\n+};\n+// --- End Mock Data ---\n+\n+\n+interface DonationListProps {\n+   listType?: 'available' | 'claimed' | 'history' | 'all';\n+   role: 'business' | 'organization';\n+   className?: string;\n+}\n+\n+const DonationList: FC<DonationListProps> = ({ listType = 'available', role, className }) => {\n+  const [donations, setDonations] = useState<Donation[]>([]);\n+  const [isLoading, setIsLoading] = useState(true);\n+  const { toast } = useToast();\n+\n+  useEffect(() => {\n+    setIsLoading(true);\n+    console.log(`Buscando donaciones por tipo: ${listType}, rol: ${role}`);\n+    // Simulate data fetching delay\n+    const timer = setTimeout(() => {\n+      try {\n+          const mockData = generateMockDonations(12); // Generate mock data\n+\n+          let filteredData = mockData;\n+          // --- Filtering Logic ---\n+           if (role === 'organization') {\n+              if (listType === 'available') {\n+                  filteredData = mockData.filter(d => d.status === 'available');\n+              } else if (listType === 'claimed') {\n+                  // Org's claimed but not yet delivered/validated (Assume 'Tu Organización' claims some)\n+                  // For mock, let's show all claimed by any Org\n+                  filteredData = mockData.filter(d => d.status === 'claimed' /* && d.claimedBy === 'Tu Organización' */);\n+              } else if (listType === 'history') {\n+                  // Org's completed (delivered/rated) or expired claims\n+                   filteredData = mockData.filter(d => (d.status === 'delivered' || d.status === 'expired') /* && d.claimedBy === 'Tu Organización' */);\n+              }\n+              // 'all' for org might mean available + their claimed/history (not implemented here)\n+          } else if (role === 'business') {\n+               if (listType === 'available') { // Businesses might see available to monitor market? Or filter their own available.\n+                  // Show only items posted by a hypothetical \"current user business\" - let's assume Empresa A\n+                  filteredData = mockData.filter(d => d.status === 'available' /* && d.postedBy === 'Empresa A' */);\n+              } else if (listType === 'claimed') {\n+                  // Business's items claimed by others, pending validation\n+                  filteredData = mockData.filter(d => d.status === 'claimed' /* && d.postedBy === 'Empresa A' */);\n+              } else if (listType === 'history') {\n+                  // Business's completed (delivered) or expired posts\n+                  filteredData = mockData.filter(d => (d.status === 'delivered' || d.status === 'expired') /* && d.postedBy === 'Empresa A' */);\n+              } else if (listType === 'all') {\n+                 // All donations posted by this business\n+                 filteredData = mockData; //.filter(d => d.postedBy === 'Empresa A');\n+              }\n+          }\n+          // --- End Filtering Logic ---\n+\n+          setDonations(filteredData);\n+      } catch (error) {\n+         console.error(\"Error generating or filtering mock data:\", error);\n+         setDonations([]); // Set empty on error\n+      } finally {\n+        setIsLoading(false);\n+      }\n+    }, 1500); // Simulate 1.5 second load\n+\n+    // Cleanup function to clear timeout if component unmounts\n+    return () => clearTimeout(timer);\n+\n+  }, [listType, role]);\n+\n+   const handleClaim = (donationId: string, quantityToClaim: number) => {\n+    console.log(`Reclamando ${quantityToClaim} unidades de la donación ${donationId}`);\n+\n+    // Find the donation being claimed\n+    const claimedDonation = donations.find(d => d.id === donationId);\n+    if (!claimedDonation) {\n+        toast({ title: \"Error\", description: \"Donación no encontrada.\", variant: \"destructive\" });\n+        return;\n+    }\n+\n+    // Simulate state update\n+    setDonations(prevDonations => {\n+       const updatedDonations = prevDonations.map(d => {\n+        if (d.id === donationId) {\n+            // Simple model: assume full claim removes item from 'available' list.\n+            // In a real app, you might adjust quantity or handle partial claims differently.\n+            return {\n+                ...d,\n+                status: 'claimed' as const, // Mark as claimed\n+                claimedBy: 'Tu Organización', // Assume current user is 'Tu Organización'\n+                claimedAt: new Date().toISOString() // Set claim time\n+            };\n+        }\n+        return d;\n+       });\n+\n+        // If the current view is 'available', filter out the newly claimed item\n+       if (listType === 'available') {\n+            return updatedDonations.filter(d => d.id !== donationId);\n+       }\n+       // Otherwise, just update the status within the existing list (e.g., in 'all' view)\n+       return updatedDonations;\n+\n+    });\n+\n+    // Show success toast\n+     toast({\n+      title: \"¡Donación Reclamada!\",\n+      description: `Has reclamado ${quantityToClaim} ${claimedDonation.unit} de ${claimedDonation.itemName}. Revisa la pestaña 'Mis Reclamadas' para ver detalles y mensajes.`,\n+      duration: 5000, // Show for 5 seconds\n+    });\n+  };\n+\n+ // Skeleton Loader structure\n+ const loadingSkeletons = Array.from({ length: 6 }).map((_, index) => (\n+    <SkeletonCard key={index} className=\"w-full overflow-hidden shadow-md flex flex-col bg-card\">\n+        <SkeletonCardHeader className=\"p-4 pb-2\">\n+            <div className=\"flex justify-between items-start mb-1\">\n+                <Skeleton className=\"h-5 w-3/5\" /> {/* Item Name */}\n+                <Skeleton className=\"h-4 w-1/4\" /> {/* Badge */}\n+            </div>\n+            <div className=\"flex justify-between items-center mt-1\">\n+                <Skeleton className=\"h-3 w-2/5\" /> {/* Posted by */}\n+                <Skeleton className=\"h-4 w-1/3\" /> {/* Price */}\n+            </div>\n+             <Skeleton className=\"h-3 w-4/5 mt-1\" /> {/* Description */}\n+        </SkeletonCardHeader>\n+        <SkeletonCardContent className=\"p-4 pt-2 flex-grow grid gap-2\">\n+            <Skeleton className=\"h-40 w-full rounded-md bg-muted mb-2\" /> {/* Image */}\n+            <div className=\"grid grid-cols-[auto,1fr] items-center gap-x-2 gap-y-1\">\n+                <Skeleton className=\"h-4 w-4 rounded-full\" /> <Skeleton className=\"h-4 w-3/4\" /> {/* Expiry */}\n+                <Skeleton className=\"h-4 w-4 rounded-full\" /> <Skeleton className=\"h-4 w-2/3\" /> {/* Quantity */}\n+                <Skeleton className=\"h-4 w-4 rounded-full\" /> <Skeleton className=\"h-4 w-full\" /> {/* Location */}\n+            </div>\n+        </SkeletonCardContent>\n+        <SkeletonCardFooter className=\"p-3\">\n+             <Skeleton className=\"h-8 w-full\" /> {/* Action Button / Status */}\n+        </SkeletonCardFooter>\n+    </SkeletonCard>\n+));\n+\n+\n+  if (isLoading) {\n+    return (\n+      <div className={cn(\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6\", className)}>\n+        {loadingSkeletons}\n+      </div>\n+    );\n+  }\n+\n+  if (donations.length === 0) {\n+     return (\n+        <div className=\"flex justify-center items-center min-h-[40vh] p-4 md:p-6\">\n+             <Alert className=\"max-w-md text-center bg-card border-border shadow-sm\">\n+                <Info className=\"h-5 w-5 stroke-primary\" />\n+                <AlertTitle className=\"font-semibold text-lg\">No Hay Donaciones Aquí</AlertTitle>\n+                <AlertDescription className=\"text-muted-foreground\">\n+                    {listType === 'available' && \"¡Parece que todas las donaciones han sido reclamadas! Vuelve más tarde.\"}\n+                    {listType === 'claimed' && role === 'organization' && \"No tienes donaciones reclamadas pendientes.\"}\n+                     {listType === 'claimed' && role === 'business' && \"Ninguna de tus donaciones publicadas ha sido reclamada aún.\"}\n+                    {listType === 'history' && \"No hay historial de donaciones todavía.\"}\n+                    {listType === 'all' && \"No se encontraron donaciones.\"}\n+                 </AlertDescription>\n+            </Alert>\n+        </div>\n+     )\n+  }\n+\n+  return (\n+     <div className={cn(\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6\", className)}>\n+      {donations.map(donation => (\n+        <DonationCard\n+          key={donation.id}\n+          donation={donation}\n+          onClaim={handleClaim} // Pass the updated handler\n+          isClaimable={role === 'organization' && donation.status === 'available'}\n+          // Show details link for Org on their claimed items, or for Biz on items they posted that are claimed/delivered/expired\n+           showDetailsLink={\n+               (role === 'organization' && donation.status === 'claimed') ||\n+               (role === 'business' && (donation.status === 'claimed' || donation.status === 'delivered' || donation.status === 'expired'))\n+            }\n+        />\n+      ))}\n+    </div>\n+  );\n+};\n+\n+export default DonationList;\n+\n"
                },
                {
                    "date": 1746550190618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n // Función para asignar imágenes locales según el nombre del producto\n const getLocalImageForItem = (itemName: string, status: Donation['status']): string => {\n   const itemNameLower = itemName.toLowerCase();\n   \n-  // Para donaciones reclamadas y entregadas (historial), usar las imágenes específicas para reclamadas\n+  // Para donaciones reclamadas, usar sus imágenes específicas\n   if (status === 'claimed') {\n     if (itemNameLower.includes('pan')) {\n       return '/images/pandulce.png';\n     } else if (itemNameLower.includes('arroz')) {\n@@ -69,403 +69,21 @@\n     } else if (itemNameLower.includes('lentejas')) {\n       return '/images/lentejas.jpg';\n     }\n   } \n-  // Para donaciones entregadas o expiradas (historial)\n-  else if (status === 'delivered' || status === 'expired') {\n-    if (itemNameLower.includes('café')) {\n-      return '/images/cafe.jpeg';\n-    } else if (itemNameLower.includes('donas')) {\n-      return '/images/donas.jpg';\n-    } else if (itemNameLower.includes('gelatina')) {\n-      return '/images/gelatina.jpg';\n-    }\n-  }\n-  // Para donaciones disponibles\n-  else {\n-    if (itemNameLower.includes('pan') || itemNameLower.includes('croissant') || itemNameLower.includes('bollería')) {\n-      return '/images/pan.jpg';\n-    } else if (itemNameLower.includes('manzanas')) {\n-      return '/images/manzanukis.jpg';\n-    } else if (itemNameLower.includes('leche')) {\n-      return '/images/leche.png';\n-    } else if (itemNameLower.includes('pasta')) {\n-      return '/images/pastaintegral.jpg';\n-    } else if (itemNameLower.includes('plátanos')) {\n-      return '/images/platanosmaduros.jpg';\n-    } else if (itemNameLower.includes('yogur')) {\n-      return '/images/yogurtgriego.png';\n-    }\n-  }\n-  \n-  // Si no hay coincidencia específica, devolver una imagen predeterminada según el estado\n-  if (status === 'claimed') {\n-    return '/images/pandulce.png';\n-  } else if (status === 'delivered' || status === 'expired') {\n-    return '/images/cafe.jpeg';\n-  } else {\n-    return '/images/pan.jpg';\n-  }\n-};\n-\n-const generateMockDonations = (count: number): Donation[] => {\n-  const items = [\n-    'Panes variados', \n-    'Manzanas Fuji Frescas', \n-    'Sopa de Lentejas Enlatada', \n-    'Cartones de Leche Semidesnatada', \n-    'Arroz Integral Ecológico',\n-    'Vasos de Gelatina Surtida',\n-    'Pan Dulce Tradicional', // Cambiado para reclamadas\n-    'Lentejas Ecológicas' // Cambiado para reclamadas\n-  ];\n-  const units = ['bolsas', 'kg', 'latas', 'litros', 'kg', 'unidades', 'piezas', 'kg']; // Match units to items\n-  const quantities = [10, 5, 24, 20, 15, 50, 30, 8]; // Numeric quantities\n-  const locations = ['Panadería El Sol', 'Frutería La Huerta', 'Almacén Central FoodLink', 'Cafetería El Rincón', 'Mercado Municipal Puesto 5', 'Supermercado La Despensa', 'Panadería Delicias', 'Tienda Orgánica Natural'];\n-  const statuses: Donation['status'][] = ['available', 'available', 'claimed', 'available', 'delivered', 'expired', 'claimed', 'claimed']; // Ajustado para tener 3 reclamadas\n-  const descriptions = [\n-    'Pan del día anterior, ideal para tostadas o migas.',\n-    'Manzanas Fuji orgánicas, algunas con pequeñas marcas.',\n-    'Sopa de lentejas casera, lista para calentar.',\n-    'Leche UHT semidesnatada, caducidad próxima (5 días).',\n-    'Arroz integral de cultivo ecológico, en perfectas condiciones.',\n-    'Gelatina de varios sabores, elaboración reciente.',\n-    'Pan dulce tradicional: conchas, orejas y bigotes recién horneados.', // Descripción para pandulce.png\n-    'Lentejas ecológicas de primera calidad, sin conservantes.' // Descripción para lentejas.jpg\n-  ];\n-  const photoHints = ['assorted bread', 'fuji apples', 'lentil soup', 'milk cartons', 'rice bags', 'jello cups', 'donuts assortment', 'coffee beans']; // Updated hints\n-   const pickupInstructions = [\n-     'Preguntar por Ana en recepción. L-V 9am-5pm.',\n-     'Recoger en muelle de carga trasero. Tocar timbre.',\n-     'Entrada por puerta lateral (indicada). Aparcamiento disponible.',\n-     'Avisar con 30 min de antelación. Llamar al 555-1234.',\n-     'Puesto 5, preguntar por Carlos. Horario de mercado.',\n-     'Ir a atención al cliente. Muelle de descarga disponible.',\n-     'Preguntar por Luis en obrador. L-S 8am-2pm.',\n-     'Recoger antes de las 12pm. Muelle trasero.',\n-   ];\n-   // Example prices in MXN$\n-   const prices = [undefined, 10.50, undefined, 5.00, undefined, 3.50, 8.00, 12.00];\n-\n-\n-  return Array.from({ length: count }, (_, i) => {\n-    const index = i % items.length; // Use modulo for cycling through data\n-    const status = statuses[index];\n-    const baseDate = new Date();\n-    const expirationOffset = status === 'expired' ? -2 : (index % 7) + 1;\n-    const expirationDate = new Date(baseDate.getTime() + 86400000 * expirationOffset);\n-\n-    const postedDate = new Date();\n-    postedDate.setDate(postedDate.getDate() - (index % 5));\n-\n-    let claimedDate: Date | undefined = undefined;\n-    let deliveredDate: Date | undefined = undefined;\n-\n-    if (status === 'claimed' || status === 'delivered') {\n-        claimedDate = new Date(postedDate.getTime() + 86400000 * (index % 2 + 1));\n-        if (claimedDate > new Date()) claimedDate = new Date(postedDate.getTime() + 3600000);\n-\n-        if (status === 'delivered') {\n-            deliveredDate = new Date(claimedDate.getTime() + 86400000 * (index % 3 + 1));\n-            if (deliveredDate > new Date()) deliveredDate = new Date(claimedDate.getTime() + 7200000);\n-        }\n-    }\n-\n-\n-    const donationId = `donation-${i + 1}`;\n-    const donationStatus = status;\n-    const isFree = prices[index] === undefined; // Determine if free based on price presence\n-    const currentPhotoHint = photoHints[index]; // Get hint for current item\n-    \n-    // Usar la función mejorada para asignar imágenes\n-    const photoUrl = getLocalImageForItem(items[index], donationStatus);\n-\n-    return {\n-      id: donationId,\n-      itemName: items[index],\n-      description: descriptions[index],\n-      quantity: quantities[index], // Use numeric quantity\n-      unit: units[index], // Use specific unit\n-      pricePerUnit: prices[index], // Assign price in MXN$\n-      expirationDate: expirationDate.toISOString(),\n-      pickupLocation: locations[index],\n-      pickupInstructions: pickupInstructions[index],\n-      photoUrl: photoUrl, // Usa la imagen local o la generada\n-      postedBy: `Empresa ${String.fromCharCode(65 + (index % 5))}`,\n-      status: donationStatus,\n-      claimedBy: status === 'claimed' || status === 'delivered' ? `Org ${index % 3 + 1}` : undefined,\n-      postedAt: postedDate.toISOString(),\n-      claimedAt: claimedDate?.toISOString(),\n-      deliveredAt: deliveredDate?.toISOString(),\n-      isFree: isFree, // Set isFree based on price\n-      messages: generateMockMessages(donationId, donationStatus),\n-      'data-ai-hint': currentPhotoHint, // Use the specific hint\n-      validationCode: status === 'delivered' || status === 'claimed' ? `VAL${100 + i}`: undefined,\n-      qualityRating: status === 'delivered' ? (index % 5) + 1 : undefined\n-    };\n-  });\n-};\n-// --- End Mock Data ---\n-\n-\n-interface DonationListProps {\n-   listType?: 'available' | 'claimed' | 'history' | 'all';\n-   role: 'business' | 'organization';\n-   className?: string;\n-}\n-\n-const DonationList: FC<DonationListProps> = ({ listType = 'available', role, className }) => {\n-  const [donations, setDonations] = useState<Donation[]>([]);\n-  const [isLoading, setIsLoading] = useState(true);\n-  const { toast } = useToast();\n-\n-  useEffect(() => {\n-    setIsLoading(true);\n-    console.log(`Buscando donaciones por tipo: ${listType}, rol: ${role}`);\n-    // Simulate data fetching delay\n-    const timer = setTimeout(() => {\n-      try {\n-          const mockData = generateMockDonations(12); // Generate mock data\n-\n-          let filteredData = mockData;\n-          // --- Filtering Logic ---\n-           if (role === 'organization') {\n-              if (listType === 'available') {\n-                  filteredData = mockData.filter(d => d.status === 'available');\n-              } else if (listType === 'claimed') {\n-                  // Org's claimed but not yet delivered/validated (Assume 'Tu Organización' claims some)\n-                  // For mock, let's show all claimed by any Org\n-                  filteredData = mockData.filter(d => d.status === 'claimed' /* && d.claimedBy === 'Tu Organización' */);\n-              } else if (listType === 'history') {\n-                  // Org's completed (delivered/rated) or expired claims\n-                   filteredData = mockData.filter(d => (d.status === 'delivered' || d.status === 'expired') /* && d.claimedBy === 'Tu Organización' */);\n-              }\n-              // 'all' for org might mean available + their claimed/history (not implemented here)\n-          } else if (role === 'business') {\n-               if (listType === 'available') { // Businesses might see available to monitor market? Or filter their own available.\n-                  // Show only items posted by a hypothetical \"current user business\" - let's assume Empresa A\n-                  filteredData = mockData.filter(d => d.status === 'available' /* && d.postedBy === 'Empresa A' */);\n-              } else if (listType === 'claimed') {\n-                  // Business's items claimed by others, pending validation\n-                  filteredData = mockData.filter(d => d.status === 'claimed' /* && d.postedBy === 'Empresa A' */);\n-              } else if (listType === 'history') {\n-                  // Business's completed (delivered) or expired posts\n-                  filteredData = mockData.filter(d => (d.status === 'delivered' || d.status === 'expired') /* && d.postedBy === 'Empresa A' */);\n-              } else if (listType === 'all') {\n-                 // All donations posted by this business\n-                 filteredData = mockData; //.filter(d => d.postedBy === 'Empresa A');\n-              }\n-          }\n-          // --- End Filtering Logic ---\n-\n-          setDonations(filteredData);\n-      } catch (error) {\n-         console.error(\"Error generating or filtering mock data:\", error);\n-         setDonations([]); // Set empty on error\n-      } finally {\n-        setIsLoading(false);\n-      }\n-    }, 1500); // Simulate 1.5 second load\n-\n-    // Cleanup function to clear timeout if component unmounts\n-    return () => clearTimeout(timer);\n-\n-  }, [listType, role]);\n-\n-   const handleClaim = (donationId: string, quantityToClaim: number) => {\n-    console.log(`Reclamando ${quantityToClaim} unidades de la donación ${donationId}`);\n-\n-    // Find the donation being claimed\n-    const claimedDonation = donations.find(d => d.id === donationId);\n-    if (!claimedDonation) {\n-        toast({ title: \"Error\", description: \"Donación no encontrada.\", variant: \"destructive\" });\n-        return;\n-    }\n-\n-    // Simulate state update\n-    setDonations(prevDonations => {\n-       const updatedDonations = prevDonations.map(d => {\n-        if (d.id === donationId) {\n-            // Simple model: assume full claim removes item from 'available' list.\n-            // In a real app, you might adjust quantity or handle partial claims differently.\n-            return {\n-                ...d,\n-                status: 'claimed' as const, // Mark as claimed\n-                claimedBy: 'Tu Organización', // Assume current user is 'Tu Organización'\n-                claimedAt: new Date().toISOString() // Set claim time\n-            };\n-        }\n-        return d;\n-       });\n-\n-        // If the current view is 'available', filter out the newly claimed item\n-       if (listType === 'available') {\n-            return updatedDonations.filter(d => d.id !== donationId);\n-       }\n-       // Otherwise, just update the status within the existing list (e.g., in 'all' view)\n-       return updatedDonations;\n-\n-    });\n-\n-    // Show success toast\n-     toast({\n-      title: \"¡Donación Reclamada!\",\n-      description: `Has reclamado ${quantityToClaim} ${claimedDonation.unit} de ${claimedDonation.itemName}. Revisa la pestaña 'Mis Reclamadas' para ver detalles y mensajes.`,\n-      duration: 5000, // Show for 5 seconds\n-    });\n-  };\n-\n- // Skeleton Loader structure\n- const loadingSkeletons = Array.from({ length: 6 }).map((_, index) => (\n-    <SkeletonCard key={index} className=\"w-full overflow-hidden shadow-md flex flex-col bg-card\">\n-        <SkeletonCardHeader className=\"p-4 pb-2\">\n-            <div className=\"flex justify-between items-start mb-1\">\n-                <Skeleton className=\"h-5 w-3/5\" /> {/* Item Name */}\n-                <Skeleton className=\"h-4 w-1/4\" /> {/* Badge */}\n-            </div>\n-            <div className=\"flex justify-between items-center mt-1\">\n-                <Skeleton className=\"h-3 w-2/5\" /> {/* Posted by */}\n-                <Skeleton className=\"h-4 w-1/3\" /> {/* Price */}\n-            </div>\n-             <Skeleton className=\"h-3 w-4/5 mt-1\" /> {/* Description */}\n-        </SkeletonCardHeader>\n-        <SkeletonCardContent className=\"p-4 pt-2 flex-grow grid gap-2\">\n-            <Skeleton className=\"h-40 w-full rounded-md bg-muted mb-2\" /> {/* Image */}\n-            <div className=\"grid grid-cols-[auto,1fr] items-center gap-x-2 gap-y-1\">\n-                <Skeleton className=\"h-4 w-4 rounded-full\" /> <Skeleton className=\"h-4 w-3/4\" /> {/* Expiry */}\n-                <Skeleton className=\"h-4 w-4 rounded-full\" /> <Skeleton className=\"h-4 w-2/3\" /> {/* Quantity */}\n-                <Skeleton className=\"h-4 w-4 rounded-full\" /> <Skeleton className=\"h-4 w-full\" /> {/* Location */}\n-            </div>\n-        </SkeletonCardContent>\n-        <SkeletonCardFooter className=\"p-3\">\n-             <Skeleton className=\"h-8 w-full\" /> {/* Action Button / Status */}\n-        </SkeletonCardFooter>\n-    </SkeletonCard>\n-));\n-\n-\n-  if (isLoading) {\n-    return (\n-      <div className={cn(\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6\", className)}>\n-        {loadingSkeletons}\n-      </div>\n-    );\n-  }\n-\n-  if (donations.length === 0) {\n-     return (\n-        <div className=\"flex justify-center items-center min-h-[40vh] p-4 md:p-6\">\n-             <Alert className=\"max-w-md text-center bg-card border-border shadow-sm\">\n-                <Info className=\"h-5 w-5 stroke-primary\" />\n-                <AlertTitle className=\"font-semibold text-lg\">No Hay Donaciones Aquí</AlertTitle>\n-                <AlertDescription className=\"text-muted-foreground\">\n-                    {listType === 'available' && \"¡Parece que todas las donaciones han sido reclamadas! Vuelve más tarde.\"}\n-                    {listType === 'claimed' && role === 'organization' && \"No tienes donaciones reclamadas pendientes.\"}\n-                     {listType === 'claimed' && role === 'business' && \"Ninguna de tus donaciones publicadas ha sido reclamada aún.\"}\n-                    {listType === 'history' && \"No hay historial de donaciones todavía.\"}\n-                    {listType === 'all' && \"No se encontraron donaciones.\"}\n-                 </AlertDescription>\n-            </Alert>\n-        </div>\n-     )\n-  }\n-\n-  return (\n-     <div className={cn(\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6\", className)}>\n-      {donations.map(donation => (\n-        <DonationCard\n-          key={donation.id}\n-          donation={donation}\n-          onClaim={handleClaim} // Pass the updated handler\n-          isClaimable={role === 'organization' && donation.status === 'available'}\n-          // Show details link for Org on their claimed items, or for Biz on items they posted that are claimed/delivered/expired\n-           showDetailsLink={\n-               (role === 'organization' && donation.status === 'claimed') ||\n-               (role === 'business' && (donation.status === 'claimed' || donation.status === 'delivered' || donation.status === 'expired'))\n-            }\n-        />\n-      ))}\n-    </div>\n-  );\n-};\n-\n-export default DonationList;\n-\n-\"use client\";\n-\n-import type { FC } from 'react';\n-import { useState, useEffect } from 'react';\n-import type { Donation, Message } from '@/types/donation';\n-import DonationCard from './donation-card';\n-import { Skeleton } from './ui/skeleton';\n-import { Card as SkeletonCard, CardContent as SkeletonCardFooter, CardHeader as SkeletonCardHeader } from \"@/components/ui/card\"; // Use aliases for skeleton card\n-import { useToast } from \"@/hooks/use-toast\";\n-import { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\n-import { Info } from 'lucide-react';\n-import { cn } from '@/lib/utils';\n-\n-\n-// --- Mock Data (Translated & Expanded with new fields) ---\n-const generateMockMessages = (donationId: string, status: Donation['status']): Message[] => {\n-  const messages: Message[] = [];\n-  const baseTime = new Date();\n-\n-  messages.push({\n-    id: `${donationId}-msg-1`,\n-    sender: 'system',\n-    text: 'Donación publicada por Empresa.',\n-    timestamp: new Date(baseTime.getTime() - 86400000 * 2), // 2 days ago\n-  });\n-\n-  if (status === 'claimed' || status === 'delivered') {\n-    messages.push({\n-      id: `${donationId}-msg-2`,\n-      sender: 'organization',\n-      text: 'Hola, hemos reclamado esta donación. ¿Cuándo podemos pasar a recogerla?',\n-      timestamp: new Date(baseTime.getTime() - 86400000), // 1 day ago\n-    });\n-    messages.push({\n-      id: `${donationId}-msg-3`,\n-      sender: 'business',\n-      text: '¡Genial! Pueden pasar mañana entre las 10 AM y las 4 PM. Por favor, usen la entrada trasera.',\n-      timestamp: new Date(baseTime.getTime() - 86400000 + 3600000), // 1 day ago + 1 hour\n-    });\n-  }\n-  if (status === 'delivered') {\n-     messages.push({\n-      id: `${donationId}-msg-4`,\n-      sender: 'organization',\n-      text: 'Recogido, ¡muchas gracias!',\n-      timestamp: new Date(baseTime.getTime() - 3600000), // 1 hour ago\n-    });\n-     messages.push({\n-      id: `${donationId}-msg-5`,\n-      sender: 'system',\n-      text: 'Entrega validada por la empresa.',\n-      timestamp: new Date(baseTime.getTime() - 1800000), // 30 mins ago\n-    });\n-  }\n-\n-  return messages;\n-};\n-\n-// Función para asignar imágenes locales según el nombre del producto\n-const getLocalImageForItem = (itemName: string, status: Donation['status']): string => {\n-  const itemNameLower = itemName.toLowerCase();\n-  \n-  // Para donaciones reclamadas y entregadas (historial), usar las imágenes específicas para reclamadas\n-  if (status === 'claimed') {\n+  // Para donaciones completadas (entregadas), usar imágenes específicas\n+  else if (status === 'delivered') {\n     if (itemNameLower.includes('pan')) {\n       return '/images/pandulce.png';\n     } else if (itemNameLower.includes('arroz')) {\n       return '/images/arroz.avif';\n     } else if (itemNameLower.includes('lentejas')) {\n       return '/images/lentejas.jpg';\n     }\n-  } \n-  // Para donaciones entregadas o expiradas (historial)\n-  else if (status === 'delivered' || status === 'expired') {\n-    if (itemNameLower.includes('café')) {\n+  }\n+  // Para donaciones expiradas\n+  else if (status === 'expired') {\n+    if (itemNameLower.includes('café') || itemNameLower.includes('cafe')) {\n       return '/images/cafe.jpeg';\n     } else if (itemNameLower.includes('donas')) {\n       return '/images/donas.jpg';\n     } else if (itemNameLower.includes('gelatina')) {\n@@ -489,11 +107,11 @@\n     }\n   }\n   \n   // Si no hay coincidencia específica, devolver una imagen predeterminada según el estado\n-  if (status === 'claimed') {\n+  if (status === 'claimed' || status === 'delivered') {\n     return '/images/pandulce.png';\n-  } else if (status === 'delivered' || status === 'expired') {\n+  } else if (status === 'expired') {\n     return '/images/cafe.jpeg';\n   } else {\n     return '/images/pan.jpg';\n   }\n@@ -506,24 +124,25 @@\n     'Sopa de Lentejas Enlatada', \n     'Cartones de Leche Semidesnatada', \n     'Arroz Integral Ecológico',\n     'Vasos de Gelatina Surtida',\n-    'Pan Dulce Tradicional', // Cambiado para reclamadas\n-    'Lentejas Ecológicas' // Cambiado para reclamadas\n+    'Pan Dulce Tradicional',\n+    'Lentejas Ecológicas'\n   ];\n-  const units = ['bolsas', 'kg', 'latas', 'litros', 'kg', 'unidades', 'piezas', 'kg']; // Match units to items\n-  const quantities = [10, 5, 24, 20, 15, 50, 30, 8]; // Numeric quantities\n+  const units = ['bolsas', 'kg', 'latas', 'litros', 'kg', 'unidades', 'piezas', 'kg'];\n+  const quantities = [10, 5, 24, 20, 15, 50, 30, 8];\n   const locations = ['Panadería El Sol', 'Frutería La Huerta', 'Almacén Central FoodLink', 'Cafetería El Rincón', 'Mercado Municipal Puesto 5', 'Supermercado La Despensa', 'Panadería Delicias', 'Tienda Orgánica Natural'];\n-  const statuses: Donation['status'][] = ['available', 'available', 'claimed', 'available', 'delivered', 'expired', 'claimed', 'claimed']; // Ajustado para tener 3 reclamadas\n+  // Modificando los estados para tener las donaciones completadas (delivered) con pan, lentejas y arroz\n+  const statuses: Donation['status'][] = ['available', 'available', 'claimed', 'available', 'delivered', 'expired', 'claimed', 'delivered'];\n   const descriptions = [\n     'Pan del día anterior, ideal para tostadas o migas.',\n     'Manzanas Fuji orgánicas, algunas con pequeñas marcas.',\n     'Sopa de lentejas casera, lista para calentar.',\n     'Leche UHT semidesnatada, caducidad próxima (5 días).',\n     'Arroz integral de cultivo ecológico, en perfectas condiciones.',\n     'Gelatina de varios sabores, elaboración reciente.',\n-    'Pan dulce tradicional: conchas, orejas y bigotes recién horneados.', // Descripción para pandulce.png\n-    'Lentejas ecológicas de primera calidad, sin conservantes.' // Descripción para lentejas.jpg\n+    'Pan dulce tradicional: conchas, orejas y bigotes recién horneados.',\n+    'Lentejas ecológicas de primera calidad, sin conservantes.'\n   ];\n   const photoHints = ['assorted bread', 'fuji apples', 'lentil soup', 'milk cartons', 'rice bags', 'jello cups', 'donuts assortment', 'coffee beans']; // Updated hints\n    const pickupInstructions = [\n      'Preguntar por Ana en recepción. L-V 9am-5pm.',\n@@ -539,10 +158,20 @@\n    const prices = [undefined, 10.50, undefined, 5.00, undefined, 3.50, 8.00, 12.00];\n \n \n   return Array.from({ length: count }, (_, i) => {\n-    const index = i % items.length; // Use modulo for cycling through data\n-    const status = statuses[index];\n+    const index = i % items.length;\n+    let status = statuses[index];\n+    \n+    // Asegurar que los elementos específicos sean entregados (delivered)\n+    if (i === 4) { // Índice 4 es Arroz\n+      status = 'delivered';\n+    } else if (i === 7) { // Índice 7 es Lentejas\n+      status = 'delivered';\n+    } else if (i === 0) { // Índice 0 es Panes\n+      status = 'delivered';\n+    }\n+    \n     const baseDate = new Date();\n     const expirationOffset = status === 'expired' ? -2 : (index % 7) + 1;\n     const expirationDate = new Date(baseDate.getTime() + 86400000 * expirationOffset);\n \n"
                },
                {
                    "date": 1746550496050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,10 @@\n   // Para donaciones completadas (entregadas), usar imágenes específicas\n   else if (status === 'delivered') {\n     if (itemNameLower.includes('pan')) {\n       return '/images/pandulce.png';\n+    } else if (itemNameLower.includes('arroz') && itemNameLower.includes('blanco')) {\n+      return '/images/arrocito.jpg';\n     } else if (itemNameLower.includes('arroz')) {\n       return '/images/arroz.avif';\n     } else if (itemNameLower.includes('lentejas')) {\n       return '/images/lentejas.jpg';\n@@ -125,14 +127,14 @@\n     'Cartones de Leche Semidesnatada', \n     'Arroz Integral Ecológico',\n     'Vasos de Gelatina Surtida',\n     'Pan Dulce Tradicional',\n-    'Lentejas Ecológicas'\n+    'Arroz Blanco Premium' // Cambiado de \"Lentejas Ecológicas\" a \"Arroz Blanco Premium\"\n   ];\n   const units = ['bolsas', 'kg', 'latas', 'litros', 'kg', 'unidades', 'piezas', 'kg'];\n   const quantities = [10, 5, 24, 20, 15, 50, 30, 8];\n   const locations = ['Panadería El Sol', 'Frutería La Huerta', 'Almacén Central FoodLink', 'Cafetería El Rincón', 'Mercado Municipal Puesto 5', 'Supermercado La Despensa', 'Panadería Delicias', 'Tienda Orgánica Natural'];\n-  // Modificando los estados para tener las donaciones completadas (delivered) con pan, lentejas y arroz\n+  // Modificando los estados para tener las donaciones completadas (delivered) con pan, arroz integral y arroz blanco\n   const statuses: Donation['status'][] = ['available', 'available', 'claimed', 'available', 'delivered', 'expired', 'claimed', 'delivered'];\n   const descriptions = [\n     'Pan del día anterior, ideal para tostadas o migas.',\n     'Manzanas Fuji orgánicas, algunas con pequeñas marcas.',\n@@ -140,9 +142,9 @@\n     'Leche UHT semidesnatada, caducidad próxima (5 días).',\n     'Arroz integral de cultivo ecológico, en perfectas condiciones.',\n     'Gelatina de varios sabores, elaboración reciente.',\n     'Pan dulce tradicional: conchas, orejas y bigotes recién horneados.',\n-    'Lentejas ecológicas de primera calidad, sin conservantes.'\n+    'Arroz blanco de grano largo, variedad jasmine importado.' // Nueva descripción para el arroz blanco\n   ];\n   const photoHints = ['assorted bread', 'fuji apples', 'lentil soup', 'milk cartons', 'rice bags', 'jello cups', 'donuts assortment', 'coffee beans']; // Updated hints\n    const pickupInstructions = [\n      'Preguntar por Ana en recepción. L-V 9am-5pm.',\n"
                },
                {
                    "date": 1746550799273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,12 +63,12 @@\n   // Para donaciones reclamadas, usar sus imágenes específicas\n   if (status === 'claimed') {\n     if (itemNameLower.includes('pan')) {\n       return '/images/pandulce.png';\n-    } else if (itemNameLower.includes('arroz')) {\n-      return '/images/arroz.avif';\n-    } else if (itemNameLower.includes('lentejas')) {\n-      return '/images/lentejas.jpg';\n+    } else if (itemNameLower.includes('plátanos') || itemNameLower.includes('platanos')) {\n+      return '/images/platanosmaduros.jpg';\n+    } else if (itemNameLower.includes('yogur') || itemNameLower.includes('yogurt')) {\n+      return '/images/yogurtgriego.png';\n     }\n   } \n   // Para donaciones completadas (entregadas), usar imágenes específicas\n   else if (status === 'delivered') {\n@@ -122,29 +122,28 @@\n const generateMockDonations = (count: number): Donation[] => {\n   const items = [\n     'Panes variados', \n     'Manzanas Fuji Frescas', \n-    'Sopa de Lentejas Enlatada', \n+    'Plátanos Maduros Orgánicos', // Cambiado para reclamadas (antes \"Sopa de Lentejas...\")\n     'Cartones de Leche Semidesnatada', \n     'Arroz Integral Ecológico',\n     'Vasos de Gelatina Surtida',\n     'Pan Dulce Tradicional',\n-    'Arroz Blanco Premium' // Cambiado de \"Lentejas Ecológicas\" a \"Arroz Blanco Premium\"\n+    'Yogurt Griego Natural' // Cambiado para reclamadas (antes \"Arroz Blanco Premium\")\n   ];\n-  const units = ['bolsas', 'kg', 'latas', 'litros', 'kg', 'unidades', 'piezas', 'kg'];\n-  const quantities = [10, 5, 24, 20, 15, 50, 30, 8];\n-  const locations = ['Panadería El Sol', 'Frutería La Huerta', 'Almacén Central FoodLink', 'Cafetería El Rincón', 'Mercado Municipal Puesto 5', 'Supermercado La Despensa', 'Panadería Delicias', 'Tienda Orgánica Natural'];\n-  // Modificando los estados para tener las donaciones completadas (delivered) con pan, arroz integral y arroz blanco\n-  const statuses: Donation['status'][] = ['available', 'available', 'claimed', 'available', 'delivered', 'expired', 'claimed', 'delivered'];\n+  const units = ['bolsas', 'kg', 'kg', 'litros', 'kg', 'unidades', 'piezas', 'unidades'];\n+  const quantities = [10, 5, 8, 20, 15, 50, 30, 12];\n+  const locations = ['Panadería El Sol', 'Frutería La Huerta', 'Mercado Orgánico', 'Cafetería El Rincón', 'Mercado Municipal Puesto 5', 'Supermercado La Despensa', 'Panadería Delicias', 'Tienda Natural'];\n+  const statuses: Donation['status'][] = ['available', 'available', 'claimed', 'available', 'delivered', 'expired', 'claimed', 'claimed']; // 3 reclamadas: plátanos, pan dulce y yogurt\n   const descriptions = [\n     'Pan del día anterior, ideal para tostadas o migas.',\n     'Manzanas Fuji orgánicas, algunas con pequeñas marcas.',\n-    'Sopa de lentejas casera, lista para calentar.',\n+    'Plátanos maduros ideales para batidos y repostería.', // Nueva descripción para plátanos\n     'Leche UHT semidesnatada, caducidad próxima (5 días).',\n     'Arroz integral de cultivo ecológico, en perfectas condiciones.',\n     'Gelatina de varios sabores, elaboración reciente.',\n     'Pan dulce tradicional: conchas, orejas y bigotes recién horneados.',\n-    'Arroz blanco de grano largo, variedad jasmine importado.' // Nueva descripción para el arroz blanco\n+    'Yogurt griego natural sin azúcares añadidos, alto en proteínas.' // Nueva descripción para yogurt\n   ];\n   const photoHints = ['assorted bread', 'fuji apples', 'lentil soup', 'milk cartons', 'rice bags', 'jello cups', 'donuts assortment', 'coffee beans']; // Updated hints\n    const pickupInstructions = [\n      'Preguntar por Ana en recepción. L-V 9am-5pm.',\n"
                },
                {
                    "date": 1746550959556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,8 +79,10 @@\n     } else if (itemNameLower.includes('arroz')) {\n       return '/images/arroz.avif';\n     } else if (itemNameLower.includes('lentejas')) {\n       return '/images/lentejas.jpg';\n+    } else if (itemNameLower.includes('yogur') || itemNameLower.includes('yogurt')) {\n+      return '/images/yogurtgriego.png';\n     }\n   }\n   // Para donaciones expiradas\n   else if (status === 'expired') {\n"
                },
                {
                    "date": 1746551123136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,28 +124,28 @@\n const generateMockDonations = (count: number): Donation[] => {\n   const items = [\n     'Panes variados', \n     'Manzanas Fuji Frescas', \n-    'Plátanos Maduros Orgánicos', // Cambiado para reclamadas (antes \"Sopa de Lentejas...\")\n+    'Lentejas Ecológicas', // Cambiado de \"Plátanos Maduros Orgánicos\" a \"Lentejas Ecológicas\"\n     'Cartones de Leche Semidesnatada', \n     'Arroz Integral Ecológico',\n     'Vasos de Gelatina Surtida',\n     'Pan Dulce Tradicional',\n-    'Yogurt Griego Natural' // Cambiado para reclamadas (antes \"Arroz Blanco Premium\")\n+    'Yogurt Griego Natural'\n   ];\n   const units = ['bolsas', 'kg', 'kg', 'litros', 'kg', 'unidades', 'piezas', 'unidades'];\n   const quantities = [10, 5, 8, 20, 15, 50, 30, 12];\n   const locations = ['Panadería El Sol', 'Frutería La Huerta', 'Mercado Orgánico', 'Cafetería El Rincón', 'Mercado Municipal Puesto 5', 'Supermercado La Despensa', 'Panadería Delicias', 'Tienda Natural'];\n-  const statuses: Donation['status'][] = ['available', 'available', 'claimed', 'available', 'delivered', 'expired', 'claimed', 'claimed']; // 3 reclamadas: plátanos, pan dulce y yogurt\n+  const statuses: Donation['status'][] = ['available', 'available', 'claimed', 'available', 'delivered', 'expired', 'claimed', 'claimed']; // 3 reclamadas\n   const descriptions = [\n     'Pan del día anterior, ideal para tostadas o migas.',\n     'Manzanas Fuji orgánicas, algunas con pequeñas marcas.',\n-    'Plátanos maduros ideales para batidos y repostería.', // Nueva descripción para plátanos\n+    'Lentejas ecológicas de primera calidad, sin conservantes.', // Nueva descripción para lentejas\n     'Leche UHT semidesnatada, caducidad próxima (5 días).',\n     'Arroz integral de cultivo ecológico, en perfectas condiciones.',\n     'Gelatina de varios sabores, elaboración reciente.',\n     'Pan dulce tradicional: conchas, orejas y bigotes recién horneados.',\n-    'Yogurt griego natural sin azúcares añadidos, alto en proteínas.' // Nueva descripción para yogurt\n+    'Yogurt griego natural sin azúcares añadidos, alto en proteínas.'\n   ];\n   const photoHints = ['assorted bread', 'fuji apples', 'lentil soup', 'milk cartons', 'rice bags', 'jello cups', 'donuts assortment', 'coffee beans']; // Updated hints\n    const pickupInstructions = [\n      'Preguntar por Ana en recepción. L-V 9am-5pm.',\n"
                },
                {
                    "date": 1746551257237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,10 +63,10 @@\n   // Para donaciones reclamadas, usar sus imágenes específicas\n   if (status === 'claimed') {\n     if (itemNameLower.includes('pan')) {\n       return '/images/pandulce.png';\n-    } else if (itemNameLower.includes('plátanos') || itemNameLower.includes('platanos')) {\n-      return '/images/platanosmaduros.jpg';\n+    } else if (itemNameLower.includes('lentejas')) {\n+      return '/images/lentejas.jpg';\n     } else if (itemNameLower.includes('yogur') || itemNameLower.includes('yogurt')) {\n       return '/images/yogurtgriego.png';\n     }\n   } \n@@ -162,18 +162,28 @@\n \n \n   return Array.from({ length: count }, (_, i) => {\n     const index = i % items.length;\n-    let status = statuses[index];\n     \n-    // Asegurar que los elementos específicos sean entregados (delivered)\n-    if (i === 4) { // Índice 4 es Arroz\n+    // Asignar estados específicos para garantizar las combinaciones correctas\n+    let status: Donation['status'];\n+    \n+    // Para donaciones reclamadas: índices 2 (lentejas), 6 (pan) y 7 (yogurt)\n+    if (i === 2) {\n+      status = 'claimed'; // Lentejas reclamadas\n+    } else if (i === 6) {\n+      status = 'claimed'; // Pan reclamado\n+    } else if (i === 7) {\n+      status = 'claimed'; // Yogurt reclamado\n+    } \n+    // Para donaciones completadas: índices 0 (pan), 4 (arroz integral) y 8 (arroz blanco)\n+    else if (i === 0 || i === 4 || i === 8) {\n       status = 'delivered';\n-    } else if (i === 7) { // Índice 7 es Lentejas\n-      status = 'delivered';\n-    } else if (i === 0) { // Índice 0 es Panes\n-      status = 'delivered';\n     }\n+    // Para el resto, usar la distribución predeterminada\n+    else {\n+      status = statuses[index];\n+    }\n     \n     const baseDate = new Date();\n     const expirationOffset = status === 'expired' ? -2 : (index % 7) + 1;\n     const expirationDate = new Date(baseDate.getTime() + 86400000 * expirationOffset);\n"
                },
                {
                    "date": 1746551418188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,26 +163,36 @@\n \n   return Array.from({ length: count }, (_, i) => {\n     const index = i % items.length;\n     \n-    // Asignar estados específicos para garantizar las combinaciones correctas\n+    // Asignar estados específicos para garantizar las combinaciones correctas sin duplicados\n     let status: Donation['status'];\n     \n-    // Para donaciones reclamadas: índices 2 (lentejas), 6 (pan) y 7 (yogurt)\n-    if (i === 2) {\n-      status = 'claimed'; // Lentejas reclamadas\n-    } else if (i === 6) {\n-      status = 'claimed'; // Pan reclamado\n+    // Para donaciones reclamadas: solo los índices específicos (sin duplicar lentejas)\n+    if (i === 6) {\n+      status = 'claimed'; // Pan Dulce reclamado\n+    } else if (i === 2 && i < items.length) {\n+      status = 'claimed'; // Lentejas reclamadas (solo primera aparición)\n     } else if (i === 7) {\n       status = 'claimed'; // Yogurt reclamado\n     } \n-    // Para donaciones completadas: índices 0 (pan), 4 (arroz integral) y 8 (arroz blanco)\n-    else if (i === 0 || i === 4 || i === 8) {\n-      status = 'delivered';\n+    // Para donaciones completadas: evitando duplicados de pan\n+    else if (i === 4) {\n+      status = 'delivered'; // Arroz integral entregado\n+    } else if (i === 8) {\n+      status = 'delivered'; // Otro producto entregado (arroz blanco)\n+    } else if (i === 0 && i < items.length) {\n+      status = 'delivered'; // Pan entregado (solo primera aparición)\n     }\n-    // Para el resto, usar la distribución predeterminada\n+    // Para el resto, usar la distribución predeterminada pero evitando duplicados\n     else {\n-      status = statuses[index];\n+      // Verificar si es un duplicado de reclamadas o entregadas\n+      if ((index === 2 && statuses[index] === 'claimed') || // Evitar otra aparición de lentejas reclamadas\n+          (index === 0 && statuses[index] === 'delivered')) { // Evitar otra aparición de pan entregado\n+        status = 'available'; // Cambiar a disponible para evitar duplicados\n+      } else {\n+        status = statuses[index];\n+      }\n     }\n     \n     const baseDate = new Date();\n     const expirationOffset = status === 'expired' ? -2 : (index % 7) + 1;\n"
                },
                {
                    "date": 1746551553561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,37 +162,38 @@\n \n \n   return Array.from({ length: count }, (_, i) => {\n     const index = i % items.length;\n+    const itemName = items[index];\n     \n-    // Asignar estados específicos para garantizar las combinaciones correctas sin duplicados\n+    // Controlar estrictamente qué donación tiene cada estado\n     let status: Donation['status'];\n     \n-    // Para donaciones reclamadas: solo los índices específicos (sin duplicar lentejas)\n-    if (i === 6) {\n+    // Para el historial (delivered), asegurar que solo haya un \"Panes variados\"\n+    if (i === 0) {\n+      status = 'delivered'; // Primera instancia de Panes variados como entregada\n+    }\n+    // Para otras repeticiones de Panes variados, cambiar a disponible\n+    else if (i > items.length && items[i % items.length] === 'Panes variados') {\n+      status = 'available'; // Cambiar cualquier otra instancia de Panes variados a disponible\n+    }\n+    // Para donaciones reclamadas: asignar estados específicos\n+    else if (i === 6) {\n       status = 'claimed'; // Pan Dulce reclamado\n-    } else if (i === 2 && i < items.length) {\n-      status = 'claimed'; // Lentejas reclamadas (solo primera aparición)\n+    } else if (i === 2) {\n+      status = 'claimed'; // Lentejas reclamadas\n     } else if (i === 7) {\n       status = 'claimed'; // Yogurt reclamado\n     } \n-    // Para donaciones completadas: evitando duplicados de pan\n+    // Para otras donaciones completadas\n     else if (i === 4) {\n-      status = 'delivered'; // Arroz integral entregado\n+      status = 'delivered'; // Arroz integral\n     } else if (i === 8) {\n-      status = 'delivered'; // Otro producto entregado (arroz blanco)\n-    } else if (i === 0 && i < items.length) {\n-      status = 'delivered'; // Pan entregado (solo primera aparición)\n+      status = 'delivered'; // Arroz blanco\n     }\n-    // Para el resto, usar la distribución predeterminada pero evitando duplicados\n+    // Para el resto, usar la distribución predeterminada\n     else {\n-      // Verificar si es un duplicado de reclamadas o entregadas\n-      if ((index === 2 && statuses[index] === 'claimed') || // Evitar otra aparición de lentejas reclamadas\n-          (index === 0 && statuses[index] === 'delivered')) { // Evitar otra aparición de pan entregado\n-        status = 'available'; // Cambiar a disponible para evitar duplicados\n-      } else {\n-        status = statuses[index];\n-      }\n+      status = statuses[index];\n     }\n     \n     const baseDate = new Date();\n     const expirationOffset = status === 'expired' ? -2 : (index % 7) + 1;\n"
                },
                {
                    "date": 1746552000938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,503 @@\n+\"use client\";\n+\n+import type { FC } from 'react';\n+import { useState, useEffect } from 'react';\n+import type { Donation, Message } from '@/types/donation';\n+import DonationCard from './donation-card';\n+import { Skeleton } from './ui/skeleton';\n+import { Card as SkeletonCard, CardContent as SkeletonCardContent, CardHeader as SkeletonCardHeader, CardFooter as SkeletonCardFooter } from \"@/components/ui/card\"; // Corregido para incluir CardFooter\n+import { useToast } from \"@/hooks/use-toast\";\n+import { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\n+import { Info } from 'lucide-react';\n+import { cn } from '@/lib/utils';\n+\n+\n+// --- Mock Data (Translated & Expanded with new fields) ---\n+const generateMockMessages = (donationId: string, status: Donation['status']): Message[] => {\n+  const messages: Message[] = [];\n+  const baseTime = new Date();\n+\n+  messages.push({\n+    id: `${donationId}-msg-1`,\n+    sender: 'system',\n+    text: 'Donación publicada por Empresa.',\n+    timestamp: new Date(baseTime.getTime() - 86400000 * 2), // 2 days ago\n+  });\n+\n+  if (status === 'claimed' || status === 'delivered') {\n+    messages.push({\n+      id: `${donationId}-msg-2`,\n+      sender: 'organization',\n+      text: 'Hola, hemos reclamado esta donación. ¿Cuándo podemos pasar a recogerla?',\n+      timestamp: new Date(baseTime.getTime() - 86400000), // 1 day ago\n+    });\n+    messages.push({\n+      id: `${donationId}-msg-3`,\n+      sender: 'business',\n+      text: '¡Genial! Pueden pasar mañana entre las 10 AM y las 4 PM. Por favor, usen la entrada trasera.',\n+      timestamp: new Date(baseTime.getTime() - 86400000 + 3600000), // 1 day ago + 1 hour\n+    });\n+  }\n+  if (status === 'delivered') {\n+     messages.push({\n+      id: `${donationId}-msg-4`,\n+      sender: 'organization',\n+      text: 'Recogido, ¡muchas gracias!',\n+      timestamp: new Date(baseTime.getTime() - 3600000), // 1 hour ago\n+    });\n+     messages.push({\n+      id: `${donationId}-msg-5`,\n+      sender: 'system',\n+      text: 'Entrega validada por la empresa.',\n+      timestamp: new Date(baseTime.getTime() - 1800000), // 30 mins ago\n+    });\n+  }\n+\n+  return messages;\n+};\n+\n+// Función para asignar imágenes locales según el nombre del producto\n+const getLocalImageForItem = (itemName: string, status: Donation['status']): string => {\n+  const itemNameLower = itemName.toLowerCase();\n+  \n+  // Para donaciones reclamadas, usar sus imágenes específicas\n+  if (status === 'claimed') {\n+    if (itemNameLower.includes('pan')) {\n+      return '/images/pandulce.png';\n+    } else if (itemNameLower.includes('lentejas')) {\n+      return '/images/lentejas.jpg';\n+    } else if (itemNameLower.includes('yogur') || itemNameLower.includes('yogurt')) {\n+      return '/images/yogurtgriego.png';\n+    }\n+  } \n+  // Para donaciones completadas (entregadas), usar imágenes específicas\n+  else if (status === 'delivered') {\n+    if (itemNameLower.includes('pan')) {\n+      return '/images/pandulce.png';\n+    } else if (itemNameLower.includes('arroz') && itemNameLower.includes('blanco')) {\n+      return '/images/arrocito.jpg';\n+    } else if (itemNameLower.includes('arroz')) {\n+      return '/images/arroz.avif';\n+    } else if (itemNameLower.includes('lentejas')) {\n+      return '/images/lentejas.jpg';\n+    } else if (itemNameLower.includes('yogur') || itemNameLower.includes('yogurt')) {\n+      return '/images/yogurtgriego.png';\n+    }\n+  }\n+  // Para donaciones expiradas\n+  else if (status === 'expired') {\n+    if (itemNameLower.includes('café') || itemNameLower.includes('cafe')) {\n+      return '/images/cafe.jpeg';\n+    } else if (itemNameLower.includes('donas')) {\n+      return '/images/donas.jpg';\n+    } else if (itemNameLower.includes('gelatina')) {\n+      return '/images/gelatina.jpg';\n+    }\n+  }\n+  // Para donaciones disponibles\n+  else {\n+    if (itemNameLower.includes('pan') || itemNameLower.includes('croissant') || itemNameLower.includes('bollería')) {\n+      return '/images/pan.jpg';\n+    } else if (itemNameLower.includes('manzanas')) {\n+      return '/images/manzanukis.jpg';\n+    } else if (itemNameLower.includes('leche')) {\n+      return '/images/leche.png';\n+    } else if (itemNameLower.includes('gelatina')) {\n+      return '/images/gelatina.jpg';\n+    } else if (itemNameLower.includes('donas')) {\n+      return '/images/donas.jpg';\n+    } else if (itemNameLower.includes('café') || itemNameLower.includes('cafe')) {\n+      return '/images/cafe.jpeg';\n+    } else if (itemNameLower.includes('pasta')) {\n+      return '/images/pastaintegral.jpg';\n+    } else if (itemNameLower.includes('plátanos')) {\n+      return '/images/platanosmaduros.jpg';\n+    } else if (itemNameLower.includes('yogur')) {\n+      return '/images/yogurtgriego.png';\n+    }\n+  }\n+  \n+  // Si no hay coincidencia específica, devolver una imagen predeterminada según el estado\n+  if (status === 'claimed' || status === 'delivered') {\n+    return '/images/pandulce.png';\n+  } else if (status === 'expired') {\n+    return '/images/cafe.jpeg';\n+  } else {\n+    return '/images/pan.jpg';\n+  }\n+};\n+\n+const generateMockDonations = (count: number): Donation[] => {\n+  const items = [\n+    'Panes variados', \n+    'Manzanas Fuji Frescas', \n+    'Lentejas Ecológicas', // Cambiado de \"Plátanos Maduros Orgánicos\" a \"Lentejas Ecológicas\"\n+    'Cartones de Leche Semidesnatada', \n+    'Arroz Integral Ecológico',\n+    'Vasos de Gelatina Surtida',\n+    'Pan Dulce Tradicional',\n+    'Yogurt Griego Natural'\n+  ];\n+  const units = ['bolsas', 'kg', 'kg', 'litros', 'kg', 'unidades', 'piezas', 'unidades'];\n+  const quantities = [10, 5, 8, 20, 15, 50, 30, 12];\n+  const locations = ['Panadería El Sol', 'Frutería La Huerta', 'Mercado Orgánico', 'Cafetería El Rincón', 'Mercado Municipal Puesto 5', 'Supermercado La Despensa', 'Panadería Delicias', 'Tienda Natural'];\n+  const statuses: Donation['status'][] = ['available', 'available', 'claimed', 'available', 'delivered', 'expired', 'claimed', 'claimed']; // 3 reclamadas\n+  const descriptions = [\n+    'Pan del día anterior, ideal para tostadas o migas.',\n+    'Manzanas Fuji orgánicas, algunas con pequeñas marcas.',\n+    'Lentejas ecológicas de primera calidad, sin conservantes.', // Nueva descripción para lentejas\n+    'Leche UHT semidesnatada, caducidad próxima (5 días).',\n+    'Arroz integral de cultivo ecológico, en perfectas condiciones.',\n+    'Gelatina de varios sabores, elaboración reciente.',\n+    'Pan dulce tradicional: conchas, orejas y bigotes recién horneados.',\n+    'Yogurt griego natural sin azúcares añadidos, alto en proteínas.'\n+  ];\n+  const photoHints = ['assorted bread', 'fuji apples', 'lentil soup', 'milk cartons', 'rice bags', 'jello cups', 'donuts assortment', 'coffee beans']; // Updated hints\n+   const pickupInstructions = [\n+     'Preguntar por Ana en recepción. L-V 9am-5pm.',\n+     'Recoger en muelle de carga trasero. Tocar timbre.',\n+     'Entrada por puerta lateral (indicada). Aparcamiento disponible.',\n+     'Avisar con 30 min de antelación. Llamar al 555-1234.',\n+     'Puesto 5, preguntar por Carlos. Horario de mercado.',\n+     'Ir a atención al cliente. Muelle de descarga disponible.',\n+     'Preguntar por Luis en obrador. L-S 8am-2pm.',\n+     'Recoger antes de las 12pm. Muelle trasero.',\n+   ];\n+   // Example prices in MXN$\n+   const prices = [undefined, 10.50, undefined, 5.00, undefined, 3.50, 8.00, 12.00];\n+\n+\n+  return Array.from({ length: count }, (_, i) => {\n+    // En lugar de usar módulo para el índice, asignamos valores específicos\n+    // para cada donación en las posiciones 0-11\n+    let itemName = '';\n+    let description = '';\n+    let status: Donation['status'] = 'available';\n+    let unit = 'unidades';\n+    let quantity = 10;\n+    \n+    // Definimos 5 donaciones disponibles con sus descripciones específicas\n+    if (i === 0) {\n+      status = 'available';\n+      itemName = 'Manzanas Fuji Frescas';\n+      description = 'Manzanas Fuji orgánicas, algunas con pequeñas marcas.';\n+      unit = 'kg';\n+      quantity = 5;\n+    }\n+    else if (i === 1) {\n+      status = 'available';\n+      itemName = 'Cartones de Leche Semidesnatada';\n+      description = 'Leche UHT semidesnatada, caducidad próxima (5 días).';\n+      unit = 'litros';\n+      quantity = 20;\n+    }\n+    else if (i === 2) {\n+      status = 'available';\n+      itemName = 'Vasos de Gelatina Surtida';\n+      description = 'Gelatina de varios sabores, elaboración reciente.';\n+      unit = 'unidades';\n+      quantity = 50;\n+    }\n+    else if (i === 3) {\n+      status = 'available';\n+      itemName = 'Donas Glaseadas Variadas';\n+      description = 'Donas con diversos toppings y rellenos, recién horneadas.';\n+      unit = 'unidades';\n+      quantity = 24;\n+    }\n+    else if (i === 4) {\n+      status = 'available';\n+      itemName = 'Café Premium Colombiano';\n+      description = 'Café de origen colombiano, perfecto para baristas.';\n+      unit = 'kg';\n+      quantity = 3;\n+    }\n+    // 3 donaciones reclamadas: pan dulce, lentejas y yogurt\n+    else if (i === 5) {\n+      status = 'claimed';\n+      itemName = 'Pan Dulce Tradicional';\n+      description = 'Pan dulce tradicional: conchas, orejas y bigotes recién horneados.';\n+      unit = 'piezas';\n+      quantity = 30;\n+    }\n+    else if (i === 6) {\n+      status = 'claimed';\n+      itemName = 'Lentejas Ecológicas';\n+      description = 'Lentejas ecológicas de primera calidad, sin conservantes.';\n+      unit = 'kg';\n+      quantity = 8;\n+    }\n+    else if (i === 7) {\n+      status = 'claimed';\n+      itemName = 'Yogurt Griego Natural';\n+      description = 'Yogurt griego natural sin azúcares añadidos, alto en proteínas.';\n+      unit = 'unidades';\n+      quantity = 12;\n+    }\n+    // 3 donaciones entregadas (historial): pan, arroz integral y arroz blanco\n+    else if (i === 8) {\n+      status = 'delivered';\n+      itemName = 'Panes variados';\n+      description = 'Pan del día anterior, ideal para tostadas o migas.';\n+      unit = 'bolsas';\n+      quantity = 10;\n+    }\n+    else if (i === 9) {\n+      status = 'delivered';\n+      itemName = 'Arroz Integral Ecológico';\n+      description = 'Arroz integral de cultivo ecológico, en perfectas condiciones.';\n+      unit = 'kg';\n+      quantity = 15;\n+    }\n+    else if (i === 10) {\n+      status = 'delivered';\n+      itemName = 'Arroz Blanco Premium';\n+      description = 'Arroz blanco de grano largo, variedad jasmine importado.';\n+      unit = 'kg';\n+      quantity = 8;\n+    }\n+    // 1 donación expirada\n+    else {\n+      status = 'expired';\n+      itemName = 'Vasos de Gelatina Surtida';\n+      description = 'Gelatina de varios sabores, elaboración reciente.';\n+      unit = 'unidades';\n+      quantity = 15;\n+    }\n+    \n+    const baseDate = new Date();\n+    const expirationOffset = status === 'expired' ? -2 : 5; // 5 días para caducidad\n+    const expirationDate = new Date(baseDate.getTime() + 86400000 * expirationOffset);\n+\n+    const postedDate = new Date();\n+    postedDate.setDate(postedDate.getDate() - (i % 5));\n+\n+    let claimedDate: Date | undefined = undefined;\n+    let deliveredDate: Date | undefined = undefined;\n+\n+    if (status === 'claimed' || status === 'delivered') {\n+        claimedDate = new Date(postedDate.getTime() + 86400000);\n+        \n+        if (status === 'delivered') {\n+            deliveredDate = new Date(claimedDate.getTime() + 86400000 * 2);\n+        }\n+    }\n+\n+    const donationId = `donation-${i + 1}`;\n+    const isFree = i % 2 === 0; // Alternar entre gratis y no gratis\n+    const pricePerUnit = isFree ? undefined : (5 + i % 10); // Precio aleatorio si no es gratis\n+    \n+    // Usar la función para asignar imágenes basado en el nombre del producto y su estado\n+    const photoUrl = getLocalImageForItem(itemName, status);\n+\n+    return {\n+      id: donationId,\n+      itemName: itemName,\n+      description: description,\n+      quantity: quantity,\n+      unit: unit,\n+      pricePerUnit: pricePerUnit,\n+      expirationDate: expirationDate.toISOString(),\n+      pickupLocation: locations[i % locations.length],\n+      pickupInstructions: pickupInstructions[i % pickupInstructions.length],\n+      photoUrl: photoUrl,\n+      postedBy: `Empresa ${String.fromCharCode(65 + (i % 5))}`,\n+      status: status,\n+      claimedBy: status === 'claimed' || status === 'delivered' ? `Org ${i % 3 + 1}` : undefined,\n+      postedAt: postedDate.toISOString(),\n+      claimedAt: claimedDate?.toISOString(),\n+      deliveredAt: deliveredDate?.toISOString(),\n+      isFree: isFree,\n+      messages: generateMockMessages(donationId, status),\n+      'data-ai-hint': itemName.toLowerCase().replace(/ /g, '_'),\n+      validationCode: status === 'delivered' || status === 'claimed' ? `VAL${100 + i}`: undefined,\n+      qualityRating: status === 'delivered' ? (i % 5) + 1 : undefined\n+    };\n+  });\n+};\n+// --- End Mock Data ---\n+\n+\n+interface DonationListProps {\n+   listType?: 'available' | 'claimed' | 'history' | 'all';\n+   role: 'business' | 'organization';\n+   className?: string;\n+}\n+\n+const DonationList: FC<DonationListProps> = ({ listType = 'available', role, className }) => {\n+  const [donations, setDonations] = useState<Donation[]>([]);\n+  const [isLoading, setIsLoading] = useState(true);\n+  const { toast } = useToast();\n+\n+  useEffect(() => {\n+    setIsLoading(true);\n+    console.log(`Buscando donaciones por tipo: ${listType}, rol: ${role}`);\n+    // Simulate data fetching delay\n+    const timer = setTimeout(() => {\n+      try {\n+          const mockData = generateMockDonations(12); // Generate mock data\n+\n+          let filteredData = mockData;\n+          // --- Filtering Logic ---\n+           if (role === 'organization') {\n+              if (listType === 'available') {\n+                  filteredData = mockData.filter(d => d.status === 'available');\n+              } else if (listType === 'claimed') {\n+                  // Org's claimed but not yet delivered/validated (Assume 'Tu Organización' claims some)\n+                  // For mock, let's show all claimed by any Org\n+                  filteredData = mockData.filter(d => d.status === 'claimed' /* && d.claimedBy === 'Tu Organización' */);\n+              } else if (listType === 'history') {\n+                  // Org's completed (delivered/rated) or expired claims\n+                   filteredData = mockData.filter(d => (d.status === 'delivered' || d.status === 'expired') /* && d.claimedBy === 'Tu Organización' */);\n+              }\n+              // 'all' for org might mean available + their claimed/history (not implemented here)\n+          } else if (role === 'business') {\n+               if (listType === 'available') { // Businesses might see available to monitor market? Or filter their own available.\n+                  // Show only items posted by a hypothetical \"current user business\" - let's assume Empresa A\n+                  filteredData = mockData.filter(d => d.status === 'available' /* && d.postedBy === 'Empresa A' */);\n+              } else if (listType === 'claimed') {\n+                  // Business's items claimed by others, pending validation\n+                  filteredData = mockData.filter(d => d.status === 'claimed' /* && d.postedBy === 'Empresa A' */);\n+              } else if (listType === 'history') {\n+                  // Business's completed (delivered) or expired posts\n+                  filteredData = mockData.filter(d => (d.status === 'delivered' || d.status === 'expired') /* && d.postedBy === 'Empresa A' */);\n+              } else if (listType === 'all') {\n+                 // All donations posted by this business\n+                 filteredData = mockData; //.filter(d => d.postedBy === 'Empresa A');\n+              }\n+          }\n+          // --- End Filtering Logic ---\n+\n+          setDonations(filteredData);\n+      } catch (error) {\n+         console.error(\"Error generating or filtering mock data:\", error);\n+         setDonations([]); // Set empty on error\n+      } finally {\n+        setIsLoading(false);\n+      }\n+    }, 1500); // Simulate 1.5 second load\n+\n+    // Cleanup function to clear timeout if component unmounts\n+    return () => clearTimeout(timer);\n+\n+  }, [listType, role]);\n+\n+   const handleClaim = (donationId: string, quantityToClaim: number) => {\n+    console.log(`Reclamando ${quantityToClaim} unidades de la donación ${donationId}`);\n+\n+    // Find the donation being claimed\n+    const claimedDonation = donations.find(d => d.id === donationId);\n+    if (!claimedDonation) {\n+        toast({ title: \"Error\", description: \"Donación no encontrada.\", variant: \"destructive\" });\n+        return;\n+    }\n+\n+    // Simulate state update\n+    setDonations(prevDonations => {\n+       const updatedDonations = prevDonations.map(d => {\n+        if (d.id === donationId) {\n+            // Simple model: assume full claim removes item from 'available' list.\n+            // In a real app, you might adjust quantity or handle partial claims differently.\n+            return {\n+                ...d,\n+                status: 'claimed' as const, // Mark as claimed\n+                claimedBy: 'Tu Organización', // Assume current user is 'Tu Organización'\n+                claimedAt: new Date().toISOString() // Set claim time\n+            };\n+        }\n+        return d;\n+       });\n+\n+        // If the current view is 'available', filter out the newly claimed item\n+       if (listType === 'available') {\n+            return updatedDonations.filter(d => d.id !== donationId);\n+       }\n+       // Otherwise, just update the status within the existing list (e.g., in 'all' view)\n+       return updatedDonations;\n+\n+    });\n+\n+    // Show success toast\n+     toast({\n+      title: \"¡Donación Reclamada!\",\n+      description: `Has reclamado ${quantityToClaim} ${claimedDonation.unit} de ${claimedDonation.itemName}. Revisa la pestaña 'Mis Reclamadas' para ver detalles y mensajes.`,\n+      duration: 5000, // Show for 5 seconds\n+    });\n+  };\n+\n+ // Skeleton Loader structure\n+ const loadingSkeletons = Array.from({ length: 6 }).map((_, index) => (\n+    <SkeletonCard key={index} className=\"w-full overflow-hidden shadow-md flex flex-col bg-card\">\n+        <SkeletonCardHeader className=\"p-4 pb-2\">\n+            <div className=\"flex justify-between items-start mb-1\">\n+                <Skeleton className=\"h-5 w-3/5\" /> {/* Item Name */}\n+                <Skeleton className=\"h-4 w-1/4\" /> {/* Badge */}\n+            </div>\n+            <div className=\"flex justify-between items-center mt-1\">\n+                <Skeleton className=\"h-3 w-2/5\" /> {/* Posted by */}\n+                <Skeleton className=\"h-4 w-1/3\" /> {/* Price */}\n+            </div>\n+             <Skeleton className=\"h-3 w-4/5 mt-1\" /> {/* Description */}\n+        </SkeletonCardHeader>\n+        <SkeletonCardContent className=\"p-4 pt-2 flex-grow grid gap-2\">\n+            <Skeleton className=\"h-40 w-full rounded-md bg-muted mb-2\" /> {/* Image */}\n+            <div className=\"grid grid-cols-[auto,1fr] items-center gap-x-2 gap-y-1\">\n+                <Skeleton className=\"h-4 w-4 rounded-full\" /> <Skeleton className=\"h-4 w-3/4\" /> {/* Expiry */}\n+                <Skeleton className=\"h-4 w-4 rounded-full\" /> <Skeleton className=\"h-4 w-2/3\" /> {/* Quantity */}\n+                <Skeleton className=\"h-4 w-4 rounded-full\" /> <Skeleton className=\"h-4 w-full\" /> {/* Location */}\n+            </div>\n+        </SkeletonCardContent>\n+        <SkeletonCardFooter className=\"p-3\">\n+             <Skeleton className=\"h-8 w-full\" /> {/* Action Button / Status */}\n+        </SkeletonCardFooter>\n+    </SkeletonCard>\n+));\n+\n+\n+  if (isLoading) {\n+    return (\n+      <div className={cn(\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6\", className)}>\n+        {loadingSkeletons}\n+      </div>\n+    );\n+  }\n+\n+  if (donations.length === 0) {\n+     return (\n+        <div className=\"flex justify-center items-center min-h-[40vh] p-4 md:p-6\">\n+             <Alert className=\"max-w-md text-center bg-card border-border shadow-sm\">\n+                <Info className=\"h-5 w-5 stroke-primary\" />\n+                <AlertTitle className=\"font-semibold text-lg\">No Hay Donaciones Aquí</AlertTitle>\n+                <AlertDescription className=\"text-muted-foreground\">\n+                    {listType === 'available' && \"¡Parece que todas las donaciones han sido reclamadas! Vuelve más tarde.\"}\n+                    {listType === 'claimed' && role === 'organization' && \"No tienes donaciones reclamadas pendientes.\"}\n+                     {listType === 'claimed' && role === 'business' && \"Ninguna de tus donaciones publicadas ha sido reclamada aún.\"}\n+                    {listType === 'history' && \"No hay historial de donaciones todavía.\"}\n+                    {listType === 'all' && \"No se encontraron donaciones.\"}\n+                 </AlertDescription>\n+            </Alert>\n+        </div>\n+     )\n+  }\n+\n+  return (\n+     <div className={cn(\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6\", className)}>\n+      {donations.map(donation => (\n+        <DonationCard\n+          key={donation.id}\n+          donation={donation}\n+          onClaim={handleClaim} // Pass the updated handler\n+          isClaimable={role === 'organization' && donation.status === 'available'}\n+          // Show details link for Org on their claimed items, or for Biz on items they posted that are claimed/delivered/expired\n+           showDetailsLink={\n+               (role === 'organization' && donation.status === 'claimed') ||\n+               (role === 'business' && (donation.status === 'claimed' || donation.status === 'delivered' || donation.status === 'expired'))\n+            }\n+        />\n+      ))}\n+    </div>\n+  );\n+};\n+\n+export default DonationList;\n+\n"
                },
                {
                    "date": 1746552025045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -500,441 +500,4 @@\n };\n \n export default DonationList;\n \n-\"use client\";\n-\n-import type { FC } from 'react';\n-import { useState, useEffect } from 'react';\n-import type { Donation, Message } from '@/types/donation';\n-import DonationCard from './donation-card';\n-import { Skeleton } from './ui/skeleton';\n-import { Card as SkeletonCard, CardContent as SkeletonCardContent, CardHeader as SkeletonCardHeader, CardFooter as SkeletonCardFooter } from \"@/components/ui/card\"; // Corregido para incluir CardFooter\n-import { useToast } from \"@/hooks/use-toast\";\n-import { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\n-import { Info } from 'lucide-react';\n-import { cn } from '@/lib/utils';\n-\n-\n-// --- Mock Data (Translated & Expanded with new fields) ---\n-const generateMockMessages = (donationId: string, status: Donation['status']): Message[] => {\n-  const messages: Message[] = [];\n-  const baseTime = new Date();\n-\n-  messages.push({\n-    id: `${donationId}-msg-1`,\n-    sender: 'system',\n-    text: 'Donación publicada por Empresa.',\n-    timestamp: new Date(baseTime.getTime() - 86400000 * 2), // 2 days ago\n-  });\n-\n-  if (status === 'claimed' || status === 'delivered') {\n-    messages.push({\n-      id: `${donationId}-msg-2`,\n-      sender: 'organization',\n-      text: 'Hola, hemos reclamado esta donación. ¿Cuándo podemos pasar a recogerla?',\n-      timestamp: new Date(baseTime.getTime() - 86400000), // 1 day ago\n-    });\n-    messages.push({\n-      id: `${donationId}-msg-3`,\n-      sender: 'business',\n-      text: '¡Genial! Pueden pasar mañana entre las 10 AM y las 4 PM. Por favor, usen la entrada trasera.',\n-      timestamp: new Date(baseTime.getTime() - 86400000 + 3600000), // 1 day ago + 1 hour\n-    });\n-  }\n-  if (status === 'delivered') {\n-     messages.push({\n-      id: `${donationId}-msg-4`,\n-      sender: 'organization',\n-      text: 'Recogido, ¡muchas gracias!',\n-      timestamp: new Date(baseTime.getTime() - 3600000), // 1 hour ago\n-    });\n-     messages.push({\n-      id: `${donationId}-msg-5`,\n-      sender: 'system',\n-      text: 'Entrega validada por la empresa.',\n-      timestamp: new Date(baseTime.getTime() - 1800000), // 30 mins ago\n-    });\n-  }\n-\n-  return messages;\n-};\n-\n-// Función para asignar imágenes locales según el nombre del producto\n-const getLocalImageForItem = (itemName: string, status: Donation['status']): string => {\n-  const itemNameLower = itemName.toLowerCase();\n-  \n-  // Para donaciones reclamadas, usar sus imágenes específicas\n-  if (status === 'claimed') {\n-    if (itemNameLower.includes('pan')) {\n-      return '/images/pandulce.png';\n-    } else if (itemNameLower.includes('lentejas')) {\n-      return '/images/lentejas.jpg';\n-    } else if (itemNameLower.includes('yogur') || itemNameLower.includes('yogurt')) {\n-      return '/images/yogurtgriego.png';\n-    }\n-  } \n-  // Para donaciones completadas (entregadas), usar imágenes específicas\n-  else if (status === 'delivered') {\n-    if (itemNameLower.includes('pan')) {\n-      return '/images/pandulce.png';\n-    } else if (itemNameLower.includes('arroz') && itemNameLower.includes('blanco')) {\n-      return '/images/arrocito.jpg';\n-    } else if (itemNameLower.includes('arroz')) {\n-      return '/images/arroz.avif';\n-    } else if (itemNameLower.includes('lentejas')) {\n-      return '/images/lentejas.jpg';\n-    } else if (itemNameLower.includes('yogur') || itemNameLower.includes('yogurt')) {\n-      return '/images/yogurtgriego.png';\n-    }\n-  }\n-  // Para donaciones expiradas\n-  else if (status === 'expired') {\n-    if (itemNameLower.includes('café') || itemNameLower.includes('cafe')) {\n-      return '/images/cafe.jpeg';\n-    } else if (itemNameLower.includes('donas')) {\n-      return '/images/donas.jpg';\n-    } else if (itemNameLower.includes('gelatina')) {\n-      return '/images/gelatina.jpg';\n-    }\n-  }\n-  // Para donaciones disponibles\n-  else {\n-    if (itemNameLower.includes('pan') || itemNameLower.includes('croissant') || itemNameLower.includes('bollería')) {\n-      return '/images/pan.jpg';\n-    } else if (itemNameLower.includes('manzanas')) {\n-      return '/images/manzanukis.jpg';\n-    } else if (itemNameLower.includes('leche')) {\n-      return '/images/leche.png';\n-    } else if (itemNameLower.includes('pasta')) {\n-      return '/images/pastaintegral.jpg';\n-    } else if (itemNameLower.includes('plátanos')) {\n-      return '/images/platanosmaduros.jpg';\n-    } else if (itemNameLower.includes('yogur')) {\n-      return '/images/yogurtgriego.png';\n-    }\n-  }\n-  \n-  // Si no hay coincidencia específica, devolver una imagen predeterminada según el estado\n-  if (status === 'claimed' || status === 'delivered') {\n-    return '/images/pandulce.png';\n-  } else if (status === 'expired') {\n-    return '/images/cafe.jpeg';\n-  } else {\n-    return '/images/pan.jpg';\n-  }\n-};\n-\n-const generateMockDonations = (count: number): Donation[] => {\n-  const items = [\n-    'Panes variados', \n-    'Manzanas Fuji Frescas', \n-    'Lentejas Ecológicas', // Cambiado de \"Plátanos Maduros Orgánicos\" a \"Lentejas Ecológicas\"\n-    'Cartones de Leche Semidesnatada', \n-    'Arroz Integral Ecológico',\n-    'Vasos de Gelatina Surtida',\n-    'Pan Dulce Tradicional',\n-    'Yogurt Griego Natural'\n-  ];\n-  const units = ['bolsas', 'kg', 'kg', 'litros', 'kg', 'unidades', 'piezas', 'unidades'];\n-  const quantities = [10, 5, 8, 20, 15, 50, 30, 12];\n-  const locations = ['Panadería El Sol', 'Frutería La Huerta', 'Mercado Orgánico', 'Cafetería El Rincón', 'Mercado Municipal Puesto 5', 'Supermercado La Despensa', 'Panadería Delicias', 'Tienda Natural'];\n-  const statuses: Donation['status'][] = ['available', 'available', 'claimed', 'available', 'delivered', 'expired', 'claimed', 'claimed']; // 3 reclamadas\n-  const descriptions = [\n-    'Pan del día anterior, ideal para tostadas o migas.',\n-    'Manzanas Fuji orgánicas, algunas con pequeñas marcas.',\n-    'Lentejas ecológicas de primera calidad, sin conservantes.', // Nueva descripción para lentejas\n-    'Leche UHT semidesnatada, caducidad próxima (5 días).',\n-    'Arroz integral de cultivo ecológico, en perfectas condiciones.',\n-    'Gelatina de varios sabores, elaboración reciente.',\n-    'Pan dulce tradicional: conchas, orejas y bigotes recién horneados.',\n-    'Yogurt griego natural sin azúcares añadidos, alto en proteínas.'\n-  ];\n-  const photoHints = ['assorted bread', 'fuji apples', 'lentil soup', 'milk cartons', 'rice bags', 'jello cups', 'donuts assortment', 'coffee beans']; // Updated hints\n-   const pickupInstructions = [\n-     'Preguntar por Ana en recepción. L-V 9am-5pm.',\n-     'Recoger en muelle de carga trasero. Tocar timbre.',\n-     'Entrada por puerta lateral (indicada). Aparcamiento disponible.',\n-     'Avisar con 30 min de antelación. Llamar al 555-1234.',\n-     'Puesto 5, preguntar por Carlos. Horario de mercado.',\n-     'Ir a atención al cliente. Muelle de descarga disponible.',\n-     'Preguntar por Luis en obrador. L-S 8am-2pm.',\n-     'Recoger antes de las 12pm. Muelle trasero.',\n-   ];\n-   // Example prices in MXN$\n-   const prices = [undefined, 10.50, undefined, 5.00, undefined, 3.50, 8.00, 12.00];\n-\n-\n-  return Array.from({ length: count }, (_, i) => {\n-    const index = i % items.length;\n-    const itemName = items[index];\n-    \n-    // Controlar estrictamente qué donación tiene cada estado\n-    let status: Donation['status'];\n-    \n-    // Para el historial (delivered), asegurar que solo haya un \"Panes variados\"\n-    if (i === 0) {\n-      status = 'delivered'; // Primera instancia de Panes variados como entregada\n-    }\n-    // Para otras repeticiones de Panes variados, cambiar a disponible\n-    else if (i > items.length && items[i % items.length] === 'Panes variados') {\n-      status = 'available'; // Cambiar cualquier otra instancia de Panes variados a disponible\n-    }\n-    // Para donaciones reclamadas: asignar estados específicos\n-    else if (i === 6) {\n-      status = 'claimed'; // Pan Dulce reclamado\n-    } else if (i === 2) {\n-      status = 'claimed'; // Lentejas reclamadas\n-    } else if (i === 7) {\n-      status = 'claimed'; // Yogurt reclamado\n-    } \n-    // Para otras donaciones completadas\n-    else if (i === 4) {\n-      status = 'delivered'; // Arroz integral\n-    } else if (i === 8) {\n-      status = 'delivered'; // Arroz blanco\n-    }\n-    // Para el resto, usar la distribución predeterminada\n-    else {\n-      status = statuses[index];\n-    }\n-    \n-    const baseDate = new Date();\n-    const expirationOffset = status === 'expired' ? -2 : (index % 7) + 1;\n-    const expirationDate = new Date(baseDate.getTime() + 86400000 * expirationOffset);\n-\n-    const postedDate = new Date();\n-    postedDate.setDate(postedDate.getDate() - (index % 5));\n-\n-    let claimedDate: Date | undefined = undefined;\n-    let deliveredDate: Date | undefined = undefined;\n-\n-    if (status === 'claimed' || status === 'delivered') {\n-        claimedDate = new Date(postedDate.getTime() + 86400000 * (index % 2 + 1));\n-        if (claimedDate > new Date()) claimedDate = new Date(postedDate.getTime() + 3600000);\n-\n-        if (status === 'delivered') {\n-            deliveredDate = new Date(claimedDate.getTime() + 86400000 * (index % 3 + 1));\n-            if (deliveredDate > new Date()) deliveredDate = new Date(claimedDate.getTime() + 7200000);\n-        }\n-    }\n-\n-\n-    const donationId = `donation-${i + 1}`;\n-    const donationStatus = status;\n-    const isFree = prices[index] === undefined; // Determine if free based on price presence\n-    const currentPhotoHint = photoHints[index]; // Get hint for current item\n-    \n-    // Usar la función mejorada para asignar imágenes\n-    const photoUrl = getLocalImageForItem(items[index], donationStatus);\n-\n-    return {\n-      id: donationId,\n-      itemName: items[index],\n-      description: descriptions[index],\n-      quantity: quantities[index], // Use numeric quantity\n-      unit: units[index], // Use specific unit\n-      pricePerUnit: prices[index], // Assign price in MXN$\n-      expirationDate: expirationDate.toISOString(),\n-      pickupLocation: locations[index],\n-      pickupInstructions: pickupInstructions[index],\n-      photoUrl: photoUrl, // Usa la imagen local o la generada\n-      postedBy: `Empresa ${String.fromCharCode(65 + (index % 5))}`,\n-      status: donationStatus,\n-      claimedBy: status === 'claimed' || status === 'delivered' ? `Org ${index % 3 + 1}` : undefined,\n-      postedAt: postedDate.toISOString(),\n-      claimedAt: claimedDate?.toISOString(),\n-      deliveredAt: deliveredDate?.toISOString(),\n-      isFree: isFree, // Set isFree based on price\n-      messages: generateMockMessages(donationId, donationStatus),\n-      'data-ai-hint': currentPhotoHint, // Use the specific hint\n-      validationCode: status === 'delivered' || status === 'claimed' ? `VAL${100 + i}`: undefined,\n-      qualityRating: status === 'delivered' ? (index % 5) + 1 : undefined\n-    };\n-  });\n-};\n-// --- End Mock Data ---\n-\n-\n-interface DonationListProps {\n-   listType?: 'available' | 'claimed' | 'history' | 'all';\n-   role: 'business' | 'organization';\n-   className?: string;\n-}\n-\n-const DonationList: FC<DonationListProps> = ({ listType = 'available', role, className }) => {\n-  const [donations, setDonations] = useState<Donation[]>([]);\n-  const [isLoading, setIsLoading] = useState(true);\n-  const { toast } = useToast();\n-\n-  useEffect(() => {\n-    setIsLoading(true);\n-    console.log(`Buscando donaciones por tipo: ${listType}, rol: ${role}`);\n-    // Simulate data fetching delay\n-    const timer = setTimeout(() => {\n-      try {\n-          const mockData = generateMockDonations(12); // Generate mock data\n-\n-          let filteredData = mockData;\n-          // --- Filtering Logic ---\n-           if (role === 'organization') {\n-              if (listType === 'available') {\n-                  filteredData = mockData.filter(d => d.status === 'available');\n-              } else if (listType === 'claimed') {\n-                  // Org's claimed but not yet delivered/validated (Assume 'Tu Organización' claims some)\n-                  // For mock, let's show all claimed by any Org\n-                  filteredData = mockData.filter(d => d.status === 'claimed' /* && d.claimedBy === 'Tu Organización' */);\n-              } else if (listType === 'history') {\n-                  // Org's completed (delivered/rated) or expired claims\n-                   filteredData = mockData.filter(d => (d.status === 'delivered' || d.status === 'expired') /* && d.claimedBy === 'Tu Organización' */);\n-              }\n-              // 'all' for org might mean available + their claimed/history (not implemented here)\n-          } else if (role === 'business') {\n-               if (listType === 'available') { // Businesses might see available to monitor market? Or filter their own available.\n-                  // Show only items posted by a hypothetical \"current user business\" - let's assume Empresa A\n-                  filteredData = mockData.filter(d => d.status === 'available' /* && d.postedBy === 'Empresa A' */);\n-              } else if (listType === 'claimed') {\n-                  // Business's items claimed by others, pending validation\n-                  filteredData = mockData.filter(d => d.status === 'claimed' /* && d.postedBy === 'Empresa A' */);\n-              } else if (listType === 'history') {\n-                  // Business's completed (delivered) or expired posts\n-                  filteredData = mockData.filter(d => (d.status === 'delivered' || d.status === 'expired') /* && d.postedBy === 'Empresa A' */);\n-              } else if (listType === 'all') {\n-                 // All donations posted by this business\n-                 filteredData = mockData; //.filter(d => d.postedBy === 'Empresa A');\n-              }\n-          }\n-          // --- End Filtering Logic ---\n-\n-          setDonations(filteredData);\n-      } catch (error) {\n-         console.error(\"Error generating or filtering mock data:\", error);\n-         setDonations([]); // Set empty on error\n-      } finally {\n-        setIsLoading(false);\n-      }\n-    }, 1500); // Simulate 1.5 second load\n-\n-    // Cleanup function to clear timeout if component unmounts\n-    return () => clearTimeout(timer);\n-\n-  }, [listType, role]);\n-\n-   const handleClaim = (donationId: string, quantityToClaim: number) => {\n-    console.log(`Reclamando ${quantityToClaim} unidades de la donación ${donationId}`);\n-\n-    // Find the donation being claimed\n-    const claimedDonation = donations.find(d => d.id === donationId);\n-    if (!claimedDonation) {\n-        toast({ title: \"Error\", description: \"Donación no encontrada.\", variant: \"destructive\" });\n-        return;\n-    }\n-\n-    // Simulate state update\n-    setDonations(prevDonations => {\n-       const updatedDonations = prevDonations.map(d => {\n-        if (d.id === donationId) {\n-            // Simple model: assume full claim removes item from 'available' list.\n-            // In a real app, you might adjust quantity or handle partial claims differently.\n-            return {\n-                ...d,\n-                status: 'claimed' as const, // Mark as claimed\n-                claimedBy: 'Tu Organización', // Assume current user is 'Tu Organización'\n-                claimedAt: new Date().toISOString() // Set claim time\n-            };\n-        }\n-        return d;\n-       });\n-\n-        // If the current view is 'available', filter out the newly claimed item\n-       if (listType === 'available') {\n-            return updatedDonations.filter(d => d.id !== donationId);\n-       }\n-       // Otherwise, just update the status within the existing list (e.g., in 'all' view)\n-       return updatedDonations;\n-\n-    });\n-\n-    // Show success toast\n-     toast({\n-      title: \"¡Donación Reclamada!\",\n-      description: `Has reclamado ${quantityToClaim} ${claimedDonation.unit} de ${claimedDonation.itemName}. Revisa la pestaña 'Mis Reclamadas' para ver detalles y mensajes.`,\n-      duration: 5000, // Show for 5 seconds\n-    });\n-  };\n-\n- // Skeleton Loader structure\n- const loadingSkeletons = Array.from({ length: 6 }).map((_, index) => (\n-    <SkeletonCard key={index} className=\"w-full overflow-hidden shadow-md flex flex-col bg-card\">\n-        <SkeletonCardHeader className=\"p-4 pb-2\">\n-            <div className=\"flex justify-between items-start mb-1\">\n-                <Skeleton className=\"h-5 w-3/5\" /> {/* Item Name */}\n-                <Skeleton className=\"h-4 w-1/4\" /> {/* Badge */}\n-            </div>\n-            <div className=\"flex justify-between items-center mt-1\">\n-                <Skeleton className=\"h-3 w-2/5\" /> {/* Posted by */}\n-                <Skeleton className=\"h-4 w-1/3\" /> {/* Price */}\n-            </div>\n-             <Skeleton className=\"h-3 w-4/5 mt-1\" /> {/* Description */}\n-        </SkeletonCardHeader>\n-        <SkeletonCardContent className=\"p-4 pt-2 flex-grow grid gap-2\">\n-            <Skeleton className=\"h-40 w-full rounded-md bg-muted mb-2\" /> {/* Image */}\n-            <div className=\"grid grid-cols-[auto,1fr] items-center gap-x-2 gap-y-1\">\n-                <Skeleton className=\"h-4 w-4 rounded-full\" /> <Skeleton className=\"h-4 w-3/4\" /> {/* Expiry */}\n-                <Skeleton className=\"h-4 w-4 rounded-full\" /> <Skeleton className=\"h-4 w-2/3\" /> {/* Quantity */}\n-                <Skeleton className=\"h-4 w-4 rounded-full\" /> <Skeleton className=\"h-4 w-full\" /> {/* Location */}\n-            </div>\n-        </SkeletonCardContent>\n-        <SkeletonCardFooter className=\"p-3\">\n-             <Skeleton className=\"h-8 w-full\" /> {/* Action Button / Status */}\n-        </SkeletonCardFooter>\n-    </SkeletonCard>\n-));\n-\n-\n-  if (isLoading) {\n-    return (\n-      <div className={cn(\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6\", className)}>\n-        {loadingSkeletons}\n-      </div>\n-    );\n-  }\n-\n-  if (donations.length === 0) {\n-     return (\n-        <div className=\"flex justify-center items-center min-h-[40vh] p-4 md:p-6\">\n-             <Alert className=\"max-w-md text-center bg-card border-border shadow-sm\">\n-                <Info className=\"h-5 w-5 stroke-primary\" />\n-                <AlertTitle className=\"font-semibold text-lg\">No Hay Donaciones Aquí</AlertTitle>\n-                <AlertDescription className=\"text-muted-foreground\">\n-                    {listType === 'available' && \"¡Parece que todas las donaciones han sido reclamadas! Vuelve más tarde.\"}\n-                    {listType === 'claimed' && role === 'organization' && \"No tienes donaciones reclamadas pendientes.\"}\n-                     {listType === 'claimed' && role === 'business' && \"Ninguna de tus donaciones publicadas ha sido reclamada aún.\"}\n-                    {listType === 'history' && \"No hay historial de donaciones todavía.\"}\n-                    {listType === 'all' && \"No se encontraron donaciones.\"}\n-                 </AlertDescription>\n-            </Alert>\n-        </div>\n-     )\n-  }\n-\n-  return (\n-     <div className={cn(\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6\", className)}>\n-      {donations.map(donation => (\n-        <DonationCard\n-          key={donation.id}\n-          donation={donation}\n-          onClaim={handleClaim} // Pass the updated handler\n-          isClaimable={role === 'organization' && donation.status === 'available'}\n-          // Show details link for Org on their claimed items, or for Biz on items they posted that are claimed/delivered/expired\n-           showDetailsLink={\n-               (role === 'organization' && donation.status === 'claimed') ||\n-               (role === 'business' && (donation.status === 'claimed' || donation.status === 'delivered' || donation.status === 'expired'))\n-            }\n-        />\n-      ))}\n-    </div>\n-  );\n-};\n-\n-export default DonationList;\n-\n"
                }
            ],
            "date": 1746548537842,
            "name": "Commit-0",
            "content": "\"use client\";\n\nimport type { FC } from 'react';\nimport { useState, useEffect } from 'react';\nimport type { Donation, Message } from '@/types/donation';\nimport DonationCard from './donation-card';\nimport { Skeleton } from './ui/skeleton';\nimport { Card as SkeletonCard, CardContent as SkeletonCardContent, CardFooter as SkeletonCardFooter, CardHeader as SkeletonCardHeader } from \"@/components/ui/card\"; // Use aliases for skeleton card\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Info } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n\n// --- Mock Data (Translated & Expanded with new fields) ---\nconst generateMockMessages = (donationId: string, status: Donation['status']): Message[] => {\n  const messages: Message[] = [];\n  const baseTime = new Date();\n\n  messages.push({\n    id: `${donationId}-msg-1`,\n    sender: 'system',\n    text: 'Donación publicada por Empresa.',\n    timestamp: new Date(baseTime.getTime() - 86400000 * 2), // 2 days ago\n  });\n\n  if (status === 'claimed' || status === 'delivered') {\n    messages.push({\n      id: `${donationId}-msg-2`,\n      sender: 'organization',\n      text: 'Hola, hemos reclamado esta donación. ¿Cuándo podemos pasar a recogerla?',\n      timestamp: new Date(baseTime.getTime() - 86400000), // 1 day ago\n    });\n    messages.push({\n      id: `${donationId}-msg-3`,\n      sender: 'business',\n      text: '¡Genial! Pueden pasar mañana entre las 10 AM y las 4 PM. Por favor, usen la entrada trasera.',\n      timestamp: new Date(baseTime.getTime() - 86400000 + 3600000), // 1 day ago + 1 hour\n    });\n  }\n  if (status === 'delivered') {\n     messages.push({\n      id: `${donationId}-msg-4`,\n      sender: 'organization',\n      text: 'Recogido, ¡muchas gracias!',\n      timestamp: new Date(baseTime.getTime() - 3600000), // 1 hour ago\n    });\n     messages.push({\n      id: `${donationId}-msg-5`,\n      sender: 'system',\n      text: 'Entrega validada por la empresa.',\n      timestamp: new Date(baseTime.getTime() - 1800000), // 30 mins ago\n    });\n  }\n\n  return messages;\n};\n\n// Función para asignar imágenes locales según el nombre del producto\nconst getLocalImageForItem = (itemName: string): string | undefined => {\n  const itemNameLower = itemName.toLowerCase();\n  \n  if (itemNameLower.includes('pan') || itemNameLower.includes('croissant') || itemNameLower.includes('bollería')) {\n    return '/images/pan.jpg';\n  } else if (itemNameLower.includes('manzanas') || itemNameLower.includes('fuji')) {\n    return '/images/manzanukis.jpg';\n  } else if (itemNameLower.includes('leche') || itemNameLower.includes('carton')) {\n    return '/images/leche.png';\n  }\n  \n  // Si no hay coincidencia, devuelve undefined para usar la imagen por defecto\n  return undefined;\n};\n\nconst generateMockDonations = (count: number): Donation[] => {\n  const items = ['Panes variados', 'Manzanas Fuji Frescas', 'Sopa de Lentejas Enlatada', 'Cartones de Leche Semidesnatada', 'Cajas de Pasta Integral', 'Vasos de Yogur Griego Natural', 'Croissants y Bollería', 'Plátanos Maduros'];\n  const units = ['bolsas', 'kg', 'latas', 'litros', 'cajas', 'unidades', 'unidades', 'kg']; // Match units to items\n  const quantities = [10, 5, 24, 20, 15, 50, 30, 8]; // Numeric quantities\n  const locations = ['Panadería El Sol', 'Frutería La Huerta', 'Almacén Central FoodLink', 'Cafetería El Rincón', 'Mercado Municipal Puesto 5', 'Supermercado La Despensa', 'Panadería Delicias', 'Frutería Vitalidad'];\n  const statuses: Donation['status'][] = ['available', 'available', 'claimed', 'available', 'delivered', 'expired', 'claimed', 'delivered'];\n  const descriptions = [\n    'Pan del día anterior, ideal para tostadas o migas.',\n    'Manzanas Fuji orgánicas, algunas con pequeñas marcas.',\n    'Sopa de lentejas casera, lista para calentar.',\n    'Leche UHT semidesnatada, caducidad próxima (5 días).',\n    'Penne integral de trigo duro.',\n    'Yogur griego natural sin azúcar, bueno por 3 días más.',\n    'Excedente de croissants y napolitanas del día.',\n    'Caja de plátanos maduros, ideales para batidos o repostería.',\n  ];\n   const photoHints = ['assorted bread', 'fuji apples', 'lentil soup', 'milk cartons', 'pasta boxes', 'yogurt cups', 'pastries assortment', 'ripe bananas']; // Specific, relevant hints\n   const pickupInstructions = [\n     'Preguntar por Ana en recepción. L-V 9am-5pm.',\n     'Recoger en muelle de carga trasero. Tocar timbre.',\n     'Entrada por puerta lateral (indicada). Aparcamiento disponible.',\n     'Avisar con 30 min de antelación. Llamar al 555-1234.',\n     'Puesto 5, preguntar por Carlos. Horario de mercado.',\n     'Ir a atención al cliente. Muelle de descarga disponible.',\n     'Preguntar por Luis en obrador. L-S 8am-2pm.',\n     'Recoger antes de las 12pm. Muelle trasero.',\n   ];\n   // Example prices in MXN$\n   const prices = [undefined, 10.50, undefined, 5.00, undefined, 3.50, 8.00, 12.00];\n\n\n  return Array.from({ length: count }, (_, i) => {\n    const index = i % items.length; // Use modulo for cycling through data\n    const status = statuses[index];\n    const baseDate = new Date();\n    const expirationOffset = status === 'expired' ? -2 : (index % 7) + 1;\n    const expirationDate = new Date(baseDate.getTime() + 86400000 * expirationOffset);\n\n    const postedDate = new Date();\n    postedDate.setDate(postedDate.getDate() - (index % 5));\n\n    let claimedDate: Date | undefined = undefined;\n    let deliveredDate: Date | undefined = undefined;\n\n    if (status === 'claimed' || status === 'delivered') {\n        claimedDate = new Date(postedDate.getTime() + 86400000 * (index % 2 + 1));\n        if (claimedDate > new Date()) claimedDate = new Date(postedDate.getTime() + 3600000);\n\n        if (status === 'delivered') {\n            deliveredDate = new Date(claimedDate.getTime() + 86400000 * (index % 3 + 1));\n            if (deliveredDate > new Date()) deliveredDate = new Date(claimedDate.getTime() + 7200000);\n        }\n    }\n\n\n    const donationId = `donation-${i + 1}`;\n    const donationStatus = status;\n    const isFree = prices[index] === undefined; // Determine if free based on price presence\n    const currentPhotoHint = photoHints[index]; // Get hint for current item\n    \n    // Usar imágenes locales si hay coincidencia, de lo contrario usar URL aleatoria\n    const localImage = getLocalImageForItem(items[index]);\n    const photoUrl = localImage || `https://picsum.photos/seed/${currentPhotoHint.replace(/ /g, '_')}/400/300`;\n\n    return {\n      id: donationId,\n      itemName: items[index],\n      description: descriptions[index],\n      quantity: quantities[index], // Use numeric quantity\n      unit: units[index], // Use specific unit\n      pricePerUnit: prices[index], // Assign price in MXN$\n      expirationDate: expirationDate.toISOString(),\n      pickupLocation: locations[index],\n      pickupInstructions: pickupInstructions[index],\n      photoUrl: photoUrl, // Usa la imagen local o la generada\n      postedBy: `Empresa ${String.fromCharCode(65 + (index % 5))}`,\n      status: donationStatus,\n      claimedBy: status === 'claimed' || status === 'delivered' ? `Org ${index % 3 + 1}` : undefined,\n      postedAt: postedDate.toISOString(),\n      claimedAt: claimedDate?.toISOString(),\n      deliveredAt: deliveredDate?.toISOString(),\n      isFree: isFree, // Set isFree based on price\n      messages: generateMockMessages(donationId, donationStatus),\n      'data-ai-hint': currentPhotoHint, // Use the specific hint\n      validationCode: status === 'delivered' || status === 'claimed' ? `VAL${100 + i}`: undefined,\n      qualityRating: status === 'delivered' ? (index % 5) + 1 : undefined\n    };\n  });\n};\n// --- End Mock Data ---\n\n\ninterface DonationListProps {\n   listType?: 'available' | 'claimed' | 'history' | 'all';\n   role: 'business' | 'organization';\n   className?: string;\n}\n\nconst DonationList: FC<DonationListProps> = ({ listType = 'available', role, className }) => {\n  const [donations, setDonations] = useState<Donation[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    setIsLoading(true);\n    console.log(`Buscando donaciones por tipo: ${listType}, rol: ${role}`);\n    // Simulate data fetching delay\n    const timer = setTimeout(() => {\n      try {\n          const mockData = generateMockDonations(12); // Generate mock data\n\n          let filteredData = mockData;\n          // --- Filtering Logic ---\n           if (role === 'organization') {\n              if (listType === 'available') {\n                  filteredData = mockData.filter(d => d.status === 'available');\n              } else if (listType === 'claimed') {\n                  // Org's claimed but not yet delivered/validated (Assume 'Tu Organización' claims some)\n                  // For mock, let's show all claimed by any Org\n                  filteredData = mockData.filter(d => d.status === 'claimed' /* && d.claimedBy === 'Tu Organización' */);\n              } else if (listType === 'history') {\n                  // Org's completed (delivered/rated) or expired claims\n                   filteredData = mockData.filter(d => (d.status === 'delivered' || d.status === 'expired') /* && d.claimedBy === 'Tu Organización' */);\n              }\n              // 'all' for org might mean available + their claimed/history (not implemented here)\n          } else if (role === 'business') {\n               if (listType === 'available') { // Businesses might see available to monitor market? Or filter their own available.\n                  // Show only items posted by a hypothetical \"current user business\" - let's assume Empresa A\n                  filteredData = mockData.filter(d => d.status === 'available' /* && d.postedBy === 'Empresa A' */);\n              } else if (listType === 'claimed') {\n                  // Business's items claimed by others, pending validation\n                  filteredData = mockData.filter(d => d.status === 'claimed' /* && d.postedBy === 'Empresa A' */);\n              } else if (listType === 'history') {\n                  // Business's completed (delivered) or expired posts\n                  filteredData = mockData.filter(d => (d.status === 'delivered' || d.status === 'expired') /* && d.postedBy === 'Empresa A' */);\n              } else if (listType === 'all') {\n                 // All donations posted by this business\n                 filteredData = mockData; //.filter(d => d.postedBy === 'Empresa A');\n              }\n          }\n          // --- End Filtering Logic ---\n\n          setDonations(filteredData);\n      } catch (error) {\n         console.error(\"Error generating or filtering mock data:\", error);\n         setDonations([]); // Set empty on error\n      } finally {\n        setIsLoading(false);\n      }\n    }, 1500); // Simulate 1.5 second load\n\n    // Cleanup function to clear timeout if component unmounts\n    return () => clearTimeout(timer);\n\n  }, [listType, role]);\n\n   const handleClaim = (donationId: string, quantityToClaim: number) => {\n    console.log(`Reclamando ${quantityToClaim} unidades de la donación ${donationId}`);\n\n    // Find the donation being claimed\n    const claimedDonation = donations.find(d => d.id === donationId);\n    if (!claimedDonation) {\n        toast({ title: \"Error\", description: \"Donación no encontrada.\", variant: \"destructive\" });\n        return;\n    }\n\n    // Simulate state update\n    setDonations(prevDonations => {\n       const updatedDonations = prevDonations.map(d => {\n        if (d.id === donationId) {\n            // Simple model: assume full claim removes item from 'available' list.\n            // In a real app, you might adjust quantity or handle partial claims differently.\n            return {\n                ...d,\n                status: 'claimed' as const, // Mark as claimed\n                claimedBy: 'Tu Organización', // Assume current user is 'Tu Organización'\n                claimedAt: new Date().toISOString() // Set claim time\n            };\n        }\n        return d;\n       });\n\n        // If the current view is 'available', filter out the newly claimed item\n       if (listType === 'available') {\n            return updatedDonations.filter(d => d.id !== donationId);\n       }\n       // Otherwise, just update the status within the existing list (e.g., in 'all' view)\n       return updatedDonations;\n\n    });\n\n    // Show success toast\n     toast({\n      title: \"¡Donación Reclamada!\",\n      description: `Has reclamado ${quantityToClaim} ${claimedDonation.unit} de ${claimedDonation.itemName}. Revisa la pestaña 'Mis Reclamadas' para ver detalles y mensajes.`,\n      duration: 5000, // Show for 5 seconds\n    });\n  };\n\n // Skeleton Loader structure\n const loadingSkeletons = Array.from({ length: 6 }).map((_, index) => (\n    <SkeletonCard key={index} className=\"w-full overflow-hidden shadow-md flex flex-col bg-card\">\n        <SkeletonCardHeader className=\"p-4 pb-2\">\n            <div className=\"flex justify-between items-start mb-1\">\n                <Skeleton className=\"h-5 w-3/5\" /> {/* Item Name */}\n                <Skeleton className=\"h-4 w-1/4\" /> {/* Badge */}\n            </div>\n            <div className=\"flex justify-between items-center mt-1\">\n                <Skeleton className=\"h-3 w-2/5\" /> {/* Posted by */}\n                <Skeleton className=\"h-4 w-1/3\" /> {/* Price */}\n            </div>\n             <Skeleton className=\"h-3 w-4/5 mt-1\" /> {/* Description */}\n        </SkeletonCardHeader>\n        <SkeletonCardContent className=\"p-4 pt-2 flex-grow grid gap-2\">\n            <Skeleton className=\"h-40 w-full rounded-md bg-muted mb-2\" /> {/* Image */}\n            <div className=\"grid grid-cols-[auto,1fr] items-center gap-x-2 gap-y-1\">\n                <Skeleton className=\"h-4 w-4 rounded-full\" /> <Skeleton className=\"h-4 w-3/4\" /> {/* Expiry */}\n                <Skeleton className=\"h-4 w-4 rounded-full\" /> <Skeleton className=\"h-4 w-2/3\" /> {/* Quantity */}\n                <Skeleton className=\"h-4 w-4 rounded-full\" /> <Skeleton className=\"h-4 w-full\" /> {/* Location */}\n            </div>\n        </SkeletonCardContent>\n        <SkeletonCardFooter className=\"p-3\">\n             <Skeleton className=\"h-8 w-full\" /> {/* Action Button / Status */}\n        </SkeletonCardFooter>\n    </SkeletonCard>\n));\n\n\n  if (isLoading) {\n    return (\n      <div className={cn(\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6\", className)}>\n        {loadingSkeletons}\n      </div>\n    );\n  }\n\n  if (donations.length === 0) {\n     return (\n        <div className=\"flex justify-center items-center min-h-[40vh] p-4 md:p-6\">\n             <Alert className=\"max-w-md text-center bg-card border-border shadow-sm\">\n                <Info className=\"h-5 w-5 stroke-primary\" />\n                <AlertTitle className=\"font-semibold text-lg\">No Hay Donaciones Aquí</AlertTitle>\n                <AlertDescription className=\"text-muted-foreground\">\n                    {listType === 'available' && \"¡Parece que todas las donaciones han sido reclamadas! Vuelve más tarde.\"}\n                    {listType === 'claimed' && role === 'organization' && \"No tienes donaciones reclamadas pendientes.\"}\n                     {listType === 'claimed' && role === 'business' && \"Ninguna de tus donaciones publicadas ha sido reclamada aún.\"}\n                    {listType === 'history' && \"No hay historial de donaciones todavía.\"}\n                    {listType === 'all' && \"No se encontraron donaciones.\"}\n                 </AlertDescription>\n            </Alert>\n        </div>\n     )\n  }\n\n  return (\n     <div className={cn(\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6\", className)}>\n      {donations.map(donation => (\n        <DonationCard\n          key={donation.id}\n          donation={donation}\n          onClaim={handleClaim} // Pass the updated handler\n          isClaimable={role === 'organization' && donation.status === 'available'}\n          // Show details link for Org on their claimed items, or for Biz on items they posted that are claimed/delivered/expired\n           showDetailsLink={\n               (role === 'organization' && donation.status === 'claimed') ||\n               (role === 'business' && (donation.status === 'claimed' || donation.status === 'delivered' || donation.status === 'expired'))\n            }\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default DonationList;\n\n"
        }
    ]
}