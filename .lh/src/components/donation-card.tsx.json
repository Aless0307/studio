{
    "sourceFile": "src/components/donation-card.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746549097958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746549097958,
            "name": "Commit-0",
            "content": "import type { FC } from 'react';\nimport Image from 'next/image';\nimport { useState } from 'react'; // Import useState\nimport { format, parseISO, formatDistanceToNowStrict } from 'date-fns';\nimport { es } from 'date-fns/locale';\nimport { Calendar, MapPin, Package, Info, Recycle, CheckCircle, AlertTriangle, Clock, MessageSquare, Eye, HandCoins, BadgePercent, Minus, Plus, ShoppingCart } from 'lucide-react'; // Added icons\nimport Link from 'next/link';\n\nimport type { Donation } from '@/types/donation';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { Separator } from './ui/separator';\nimport { Input } from './ui/input'; // Import Input\n\ninterface DonationCardProps {\n  donation: Donation;\n  onClaim?: (donationId: string, quantityToClaim: number) => void; // Callback with quantity\n  isClaimable?: boolean;\n  showDetailsLink?: boolean;\n}\n\nconst DonationCard: FC<DonationCardProps> = ({ donation, onClaim, isClaimable = false, showDetailsLink = false }) => {\n  const [quantityToClaim, setQuantityToClaim] = useState(1); // State for quantity selection\n\n  const formatDate = (date: Date | string | undefined): string => {\n    if (!date) return 'N/D';\n    try {\n      const dateObj = typeof date === 'string' ? parseISO(date) : date;\n      if (isNaN(dateObj.getTime())) return 'Fecha Inválida';\n      return format(dateObj, 'dd MMM, yyyy', { locale: es });\n    } catch (error) {\n      console.error(\"Error al formatear fecha:\", error);\n      return 'Fecha inválida';\n    }\n  };\n\n   const formatRelativeDate = (date: Date | string | undefined): string => {\n    if (!date) return 'hace un tiempo';\n    try {\n      const dateObj = typeof date === 'string' ? parseISO(date) : date;\n       if (isNaN(dateObj.getTime())) return 'Fecha Inválida';\n      return formatDistanceToNowStrict(dateObj, { addSuffix: true, locale: es });\n    } catch (error) {\n      console.error(\"Error al formatear fecha relativa:\", error);\n      return 'Fecha inválida';\n    }\n   };\n\n  const getStatusBadgeVariant = (status: Donation['status']): \"default\" | \"secondary\" | \"destructive\" | \"outline\" => {\n    switch (status) {\n      case 'available':\n        return 'default';\n      case 'claimed':\n        return 'secondary';\n      case 'delivered':\n        return 'outline';\n      case 'expired':\n        return 'destructive';\n      default:\n        return 'secondary';\n    }\n  };\n\n   const getStatusIcon = (status: Donation['status']): React.ReactNode => {\n     switch (status) {\n      case 'available':\n        return <Recycle className=\"mr-1 h-3 w-3\" />;\n      case 'claimed':\n        return <Info className=\"mr-1 h-3 w-3\" />;\n      case 'delivered':\n        return <CheckCircle className=\"mr-1 h-3 w-3\" />;\n      case 'expired':\n        return <AlertTriangle className=\"mr-1 h-3 w-3\" />;\n      default:\n        return null;\n    }\n   };\n\n   const getStatusText = (status: Donation['status']): string => {\n     switch (status) {\n        case 'available': return 'Disponible';\n        case 'claimed': return 'Reclamado';\n        case 'delivered': return 'Entregado';\n        case 'expired': return 'Caducado';\n        default: return status;\n     }\n   };\n\n   const PriceBadge: FC<{ isFree: boolean; pricePerUnit?: number; unit?: string }> = ({ isFree, pricePerUnit, unit }) => (\n     <Badge variant={isFree ? \"secondary\" : \"outline\"} className={`text-xs ${isFree ? 'border-green-500 text-green-700 dark:text-green-400 bg-green-100 dark:bg-green-900/30' : 'border-orange-500 text-orange-700 dark:text-orange-400 bg-orange-100 dark:bg-orange-900/30'}`}>\n        {isFree ? (\n             <>\n                <BadgePercent className=\"mr-1 h-3 w-3\" /> Gratis\n             </>\n        ) : (\n            <>\n                 <HandCoins className=\"mr-1 h-3 w-3\" /> MXN$ {pricePerUnit?.toFixed(2)} / {unit || 'unidad'}\n             </>\n        )}\n     </Badge>\n   );\n\n   const handleQuantityChange = (change: number) => {\n    setQuantityToClaim(prev => {\n        const newValue = prev + change;\n        if (newValue < 1) return 1; // Minimum 1\n        if (newValue > donation.quantity) return donation.quantity; // Maximum available\n        return newValue;\n    });\n   };\n\n   const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n       let value = parseInt(e.target.value, 10);\n       if (isNaN(value) || value < 1) value = 1;\n       if (value > donation.quantity) value = donation.quantity;\n       setQuantityToClaim(value);\n   };\n\n\n  return (\n    <Card className=\"w-full overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300 flex flex-col bg-card border border-border rounded-lg\">\n      <CardHeader className=\"p-4 pb-2\">\n        <div className=\"flex justify-between items-start gap-2 mb-1\">\n           <CardTitle className=\"text-base font-semibold flex items-center gap-2 text-foreground\">\n              <Package className=\"h-5 w-5 text-primary flex-shrink-0\"/>\n              <span className=\"line-clamp-2\">{donation.itemName}</span>\n           </CardTitle>\n           <Badge variant={getStatusBadgeVariant(donation.status)} className=\"capitalize whitespace-nowrap flex-shrink-0 flex items-center text-xs px-2 py-0.5\">\n             {getStatusIcon(donation.status)}\n             {getStatusText(donation.status)}\n           </Badge>\n        </div>\n         <div className=\"flex justify-between items-center mt-1\">\n            <TooltipProvider>\n                <Tooltip>\n                    <TooltipTrigger asChild>\n                         <p className=\"text-xs text-muted-foreground cursor-default\">\n                            Publicado por {donation.postedBy} {formatRelativeDate(donation.postedAt)}\n                         </p>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                        <p>{formatDate(donation.postedAt)}</p>\n                    </TooltipContent>\n                </Tooltip>\n            </TooltipProvider>\n             <PriceBadge isFree={donation.isFree} pricePerUnit={donation.pricePerUnit} unit={donation.unit} />\n         </div>\n\n        {donation.description && (\n          <CardDescription className=\"text-xs text-muted-foreground pt-1 line-clamp-2\">{donation.description}</CardDescription>\n        )}\n      </CardHeader>\n      <CardContent className=\"p-4 pt-2 flex-grow grid gap-2 text-sm\">\n         {donation.photoUrl ? (\n           <div className=\"relative h-40 w-full rounded-md overflow-hidden bg-muted mb-2\">\n             <Image\n               src={donation.photoUrl}\n               alt={`Foto de ${donation.itemName}`}\n               fill={true}\n               style={{ objectFit: 'contain', padding: '4px' }}\n               sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\n               data-ai-hint={donation['data-ai-hint'] || 'food donation'}\n               priority={false}\n               className=\"rounded-md\"\n             />\n           </div>\n         ) : (\n            <div className=\"flex items-center justify-center h-40 w-full rounded-md bg-secondary mb-2\" data-ai-hint=\"food donation abstract\">\n                <Package className=\"h-16 w-16 text-muted-foreground opacity-30\" />\n            </div>\n         )}\n        <div className=\"grid grid-cols-[auto,1fr] items-center gap-x-2 gap-y-1\">\n           <TooltipProvider>\n             <Tooltip>\n                <TooltipTrigger>\n                    <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n                </TooltipTrigger>\n                 <TooltipContent side=\"left\">\n                    <p>Fecha de Caducidad</p>\n                 </TooltipContent>\n             </Tooltip>\n           </TooltipProvider>\n           <span className=\"truncate\">Caduca: {formatDate(donation.expirationDate)} ({formatRelativeDate(donation.expirationDate)})</span>\n\n           <TooltipProvider>\n             <Tooltip>\n                <TooltipTrigger>\n                    <Info className=\"h-4 w-4 text-muted-foreground\" />\n                </TooltipTrigger>\n                 <TooltipContent side=\"left\">\n                    <p>Cantidad Disponible</p>\n                 </TooltipContent>\n             </Tooltip>\n           </TooltipProvider>\n           {/* Updated Quantity Display */}\n           <span className=\"truncate\">Disponibles: {donation.quantity} {donation.unit}</span>\n\n           <TooltipProvider>\n             <Tooltip>\n                <TooltipTrigger>\n                    <MapPin className=\"h-4 w-4 text-muted-foreground\" />\n                </TooltipTrigger>\n                 <TooltipContent side=\"left\">\n                    <p>Ubicación de Recogida</p>\n                 </TooltipContent>\n             </Tooltip>\n           </TooltipProvider>\n           <span className=\"truncate\">{donation.pickupLocation}</span>\n        </div>\n\n      </CardContent>\n       <Separator className=\"my-0 mx-4\"/>\n      <CardFooter className=\"p-3 flex flex-col gap-2\">\n         {/* Claim Section (if applicable) */}\n        {isClaimable && donation.status === 'available' && onClaim && (\n          <div className=\"w-full space-y-2\">\n             <div className=\"flex items-center justify-center gap-2\">\n                  <Button variant=\"outline\" size=\"icon\" className=\"h-7 w-7\" onClick={() => handleQuantityChange(-1)} disabled={quantityToClaim <= 1}>\n                     <Minus className=\"h-4 w-4\" />\n                  </Button>\n                  <Input\n                     type=\"number\"\n                     className=\"h-7 w-16 text-center px-1\"\n                     value={quantityToClaim}\n                     onChange={handleInputChange}\n                     min={1}\n                     max={donation.quantity}\n                   />\n                   <span className=\"text-xs text-muted-foreground ml-1\">{donation.unit}</span>\n                  <Button variant=\"outline\" size=\"icon\" className=\"h-7 w-7\" onClick={() => handleQuantityChange(1)} disabled={quantityToClaim >= donation.quantity}>\n                     <Plus className=\"h-4 w-4\" />\n                  </Button>\n             </div>\n              <Button onClick={() => onClaim(donation.id, quantityToClaim)} className=\"w-full bg-accent text-accent-foreground hover:bg-accent/90 text-xs h-8\">\n                 <ShoppingCart className=\"mr-1 h-3 w-3\"/> Reclamar {quantityToClaim} {donation.unit}\n              </Button>\n          </div>\n        )}\n\n         {/* Details Link (if applicable) */}\n         {showDetailsLink && donation.status === 'claimed' && (\n           <Link href={`/donations/${donation.id}`} passHref legacyBehavior>\n             <Button variant=\"outline\" className=\"w-full text-xs h-8\">\n                <MessageSquare className=\"mr-1 h-3 w-3\" /> Ver Detalles / Mensajes\n             </Button>\n           </Link>\n        )}\n\n         {/* Status Messages */}\n         {donation.status === 'claimed' && !showDetailsLink && (\n            <p className=\"text-xs text-center w-full text-muted-foreground italic\">\n              Reclamado por {donation.claimedBy || 'una organización'} {donation.claimedAt ? formatRelativeDate(donation.claimedAt) : ''}\n            </p>\n         )}\n          {donation.status === 'delivered' && (\n            <p className=\"text-xs text-center w-full text-green-700 dark:text-green-400 flex items-center justify-center gap-1\">\n              <CheckCircle className=\"h-3 w-3\"/> Entregado Correctamente\n            </p>\n          )}\n           {donation.status === 'expired' && (\n            <p className=\"text-xs text-center w-full text-destructive flex items-center justify-center gap-1\">\n                <AlertTriangle className=\"h-3 w-3\"/> Esta donación ha caducado.\n            </p>\n           )}\n\n          {/* Fallback View Details Icon */}\n         {donation.status !== 'available' && !showDetailsLink && (\n             <div className=\"w-full flex justify-end\"> {/* Align icon to the right */}\n                 <TooltipProvider>\n                    <Tooltip>\n                        <TooltipTrigger asChild>\n                            <Link href={`/donations/${donation.id}`} passHref legacyBehavior>\n                                <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8 text-muted-foreground hover:text-primary\">\n                                    <Eye className=\"h-4 w-4\" />\n                                </Button>\n                            </Link>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                            <p>Ver Detalles</p>\n                        </TooltipContent>\n                    </Tooltip>\n                </TooltipProvider>\n             </div>\n         )}\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default DonationCard;\n"
        }
    ]
}