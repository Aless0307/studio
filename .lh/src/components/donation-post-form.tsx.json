{
    "sourceFile": "src/components/donation-post-form.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1746549583000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1746549583000,
            "name": "Commit-0",
            "content": "\n\"use client\";\n\nimport type { FC } from 'react';\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { CalendarIcon, Image as ImageIcon, MapPin, Package, PlusCircle, Info, BadgePercent, HandCoins, Weight, Box, Tag } from \"lucide-react\"; // Added more icons\nimport { format } from \"date-fns\";\nimport { es } from 'date-fns/locale'; // Import Spanish locale\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\"; // Import Switch\nimport { Label } from \"@/components/ui/label\"; // Import Label for Switch\nimport { cn } from \"@/lib/utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"; // Import Select for units\n\nconst formSchema = z.object({\n  itemName: z.string().min(3, {\n    message: \"El nombre del artículo debe tener al menos 3 caracteres.\",\n  }),\n  description: z.string().optional(),\n  quantity: z.coerce.number().positive({ message: \"La cantidad debe ser un número positivo.\" }), // Ensure positive number\n  unit: z.string().min(1, { message: \"La unidad es requerida.\" }), // Add unit field\n  expirationDate: z.date({\n    required_error: \"La fecha de caducidad es requerida.\",\n  }),\n  pickupLocation: z.string().min(5, {\n    message: \"La ubicación de recogida debe tener al menos 5 caracteres.\",\n  }),\n  pickupInstructions: z.string().optional(),\n  isFree: z.boolean().default(true),\n  pricePerUnit: z.coerce.number().positive({ message: \"El precio debe ser un número positivo.\" }).optional(), // Optional positive number\n  photo: z.any().optional(),\n}).refine(data => data.isFree || data.pricePerUnit !== undefined, { // If not free, price is required\n  message: \"Debe indicar un precio por unidad si la donación no es gratuita.\",\n  path: [\"pricePerUnit\"],\n});\n\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface DonationPostFormProps {}\n\nconst DonationPostForm: FC<DonationPostFormProps> = ({}) => {\n  const { toast } = useToast();\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      itemName: \"\",\n      description: \"\",\n      quantity: undefined, // Default to undefined for numeric input\n      unit: \"\", // Default empty unit\n      pickupLocation: \"\",\n      pickupInstructions: \"\",\n      isFree: true,\n      pricePerUnit: undefined,\n      photo: null,\n    },\n  });\n\n  const isFreeValue = form.watch('isFree');\n\n  async function onSubmit(values: FormData) {\n    // Simulate API call / Server Action\n    const finalValues = {\n        ...values,\n        pricePerUnit: values.isFree ? undefined : values.pricePerUnit, // Ensure price is undefined if free\n    };\n    console.log(\"Publicando donación:\", finalValues);\n    await new Promise(resolve => setTimeout(resolve, 1500)); // Simulate delay\n\n    // Display success toast\n     toast({\n      title: \"¡Donación Publicada!\",\n      description: `Tu ${finalValues.isFree ? 'donación gratuita' : 'oferta con precio simbólico'} de ${finalValues.itemName} ha sido listada correctamente.`,\n      variant: \"default\",\n    });\n\n    // Reset form after successful submission\n    form.reset();\n     // Ensure isFree defaults back to true after reset\n     form.setValue('isFree', true);\n  }\n\n  return (\n    <Card className=\"w-full max-w-2xl mx-auto shadow-xl rounded-xl border border-border/50 bg-gradient-to-br from-card via-card to-secondary/10 dark:from-card dark:to-black/20\">\n      <CardHeader className=\"p-6\">\n        <CardTitle className=\"flex items-center gap-3 text-xl sm:text-2xl font-bold text-foreground\">\n          <PlusCircle className=\"h-6 w-6 text-primary flex-shrink-0\" />\n          Publicar Nueva Donación\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"p-6 pt-0\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Item Name */}\n            <FormField\n              control={form.control}\n              name=\"itemName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"flex items-center gap-1.5 text-sm font-medium\"><Package className=\"h-4 w-4\"/>Nombre del Artículo *</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Ej., Pan del día anterior, Manzanas Fuji\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n             {/* isFree Switch */}\n             <FormField\n              control={form.control}\n              name=\"isFree\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm bg-background/50\">\n                  <div className=\"space-y-0.5\">\n                     <FormLabel className=\"flex items-center gap-1.5\">\n                        {field.value ? <BadgePercent className=\"h-4 w-4 text-green-600\"/> : <HandCoins className=\"h-4 w-4 text-orange-600\"/> }\n                        {field.value ? 'Ofrecer Gratis' : 'Establecer Precio Simbólico'}\n                    </FormLabel>\n                     <FormDescription className=\"text-xs\">\n                        {field.value\n                            ? \"La donación se ofrecerá sin coste alguno.\"\n                            : \"Se solicitará una pequeña aportación simbólica por unidad.\"}\n                    </FormDescription>\n                  </div>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                   <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Price Per Unit (Conditional) */}\n            {!isFreeValue && (\n              <FormField\n                control={form.control}\n                name=\"pricePerUnit\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"flex items-center gap-1.5 text-sm font-medium\"><Tag className=\"h-4 w-4\"/>Precio por Unidad (MXN$) *</FormLabel>\n                    <FormControl>\n                      <Input type=\"number\" step=\"0.01\" placeholder=\"Ej., 10.50\" {...field} />\n                    </FormControl>\n                    <FormDescription className=\"text-xs\">\n                       Indica el precio simbólico por cada unidad (kg, lata, etc.).\n                     </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            )}\n\n\n            {/* Description */}\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"text-sm font-medium\">Descripción (Opcional)</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Añade detalles útiles: marca, estado, tamaño, ingredientes...\"\n                      className=\"resize-y min-h-[60px]\"\n                      {...field}\n                      value={field.value ?? ''}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n             <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                {/* Quantity */}\n                <FormField\n                control={form.control}\n                name=\"quantity\"\n                render={({ field }) => (\n                    <FormItem>\n                    <FormLabel className=\"flex items-center gap-1.5 text-sm font-medium\"><Box className=\"h-4 w-4\"/>Cantidad Total *</FormLabel>\n                    <FormControl>\n                        <Input type=\"number\" placeholder=\"Ej., 10\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                    </FormItem>\n                )}\n                />\n\n                 {/* Unit */}\n                <FormField\n                control={form.control}\n                name=\"unit\"\n                render={({ field }) => (\n                    <FormItem>\n                    <FormLabel className=\"flex items-center gap-1.5 text-sm font-medium\"><Weight className=\"h-4 w-4\"/>Unidad *</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                        <SelectTrigger>\n                            <SelectValue placeholder=\"Selecciona unidad\" />\n                        </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                            <SelectItem value=\"kg\">Kilogramos (kg)</SelectItem>\n                            <SelectItem value=\"litros\">Litros (l)</SelectItem>\n                            <SelectItem value=\"unidades\">Unidades</SelectItem>\n                            <SelectItem value=\"latas\">Latas</SelectItem>\n                            <SelectItem value=\"paquetes\">Paquetes</SelectItem>\n                            <SelectItem value=\"cajas\">Cajas</SelectItem>\n                            <SelectItem value=\"bolsas\">Bolsas</SelectItem>\n                            <SelectItem value=\"bandejas\">Bandejas</SelectItem>\n                        </SelectContent>\n                    </Select>\n                    <FormMessage />\n                    </FormItem>\n                )}\n                />\n             </div>\n\n             {/* Expiration Date */}\n             <FormField\n              control={form.control}\n              name=\"expirationDate\"\n              render={({ field }) => (\n                <FormItem className=\"flex flex-col\">\n                  <FormLabel className=\"flex items-center gap-1.5 text-sm font-medium\"><CalendarIcon className=\"h-4 w-4\"/>Fecha de Caducidad *</FormLabel>\n                  <Popover>\n                    <PopoverTrigger asChild>\n                      <FormControl>\n                        <Button\n                          variant={\"outline\"}\n                          className={cn(\n                            \"w-full justify-start text-left font-normal\",\n                            !field.value && \"text-muted-foreground\"\n                          )}\n                        >\n                          <CalendarIcon className=\"mr-2 h-4 w-4 opacity-70\" />\n                          {field.value ? (\n                            format(field.value, \"PPP\", { locale: es })\n                          ) : (\n                            <span>Selecciona una fecha</span>\n                          )}\n                        </Button>\n                      </FormControl>\n                    </PopoverTrigger>\n                    <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                      <Calendar\n                        locale={es}\n                        mode=\"single\"\n                        selected={field.value}\n                        onSelect={field.onChange}\n                        disabled={(date) =>\n                          date < new Date(new Date().setHours(0, 0, 0, 0))\n                        }\n                        initialFocus\n                      />\n                    </PopoverContent>\n                  </Popover>\n                  <FormDescription className=\"text-xs\">\n                    Fecha de 'consumo preferente' o caducidad.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n             {/* Pickup Location */}\n            <FormField\n              control={form.control}\n              name=\"pickupLocation\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"flex items-center gap-1.5 text-sm font-medium\"><MapPin className=\"h-4 w-4\"/>Ubicación de Recogida *</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Dirección completa o punto de referencia\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n             {/* Pickup Instructions */}\n            <FormField\n              control={form.control}\n              name=\"pickupInstructions\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"flex items-center gap-1.5 text-sm font-medium\"><Info className=\"h-4 w-4\"/>Instrucciones de Recogida (Opcional)</FormLabel>\n                  <FormControl>\n                     <Textarea\n                      placeholder=\"Ej., Horario, persona de contacto, muelle de carga, indicaciones especiales...\"\n                      className=\"resize-y min-h-[60px]\"\n                      {...field}\n                       value={field.value ?? ''}\n                    />\n                  </FormControl>\n                   <FormDescription className=\"text-xs\">\n                     Detalles para facilitar la recogida a la organización.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n\n            {/* Photo Upload */}\n             <FormField\n              control={form.control}\n              name=\"photo\"\n              render={({ field: { onChange, value, ...rest } }) => (\n                <FormItem>\n                  <FormLabel className=\"flex items-center gap-1.5 text-sm font-medium\"><ImageIcon className=\"h-4 w-4\"/>Subir Foto (Opcional)</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={(e) => onChange(e.target.files ? e.target.files[0] : null)}\n                      className=\"file:text-foreground\"\n                       {...rest}\n                     />\n                  </FormControl>\n                  <FormDescription className=\"text-xs\">\n                    Una imagen clara ayuda mucho. Máximo 5MB.\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Submit Button */}\n            <Button type=\"submit\" className=\"w-full bg-primary text-primary-foreground hover:bg-primary/90 h-11 text-base font-semibold shadow-md transition-all duration-200 ease-in-out hover:shadow-lg active:scale-[0.98]\" disabled={form.formState.isSubmitting}>\n              {form.formState.isSubmitting ? \"Publicando...\" : \"Publicar Donación\"}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default DonationPostForm;\n"
        }
    ]
}